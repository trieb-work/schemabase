name: CI

# All required 3rd party services are hosted in docker containers.
#
# The webhooks service is started inside a docker container as well and all
# integration tests are being run with a fresh database seed

on:
  pull_request:

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - uses: actions/setup-node@v2
        with:
          node-version: "16"

      - name: Cache pnpm modules
        uses: actions/cache@v2
        with:
          path: ~/.pnpm-store
          key: ${{ runner.os }}-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-

      - uses: pnpm/action-setup@v2.0.1
        with:
          version: latest

      - name: Install
        run: pnpm install

      - name: Build
        run: make build

      # - name: Lint
      #   run: pnpm lint

      - name: Check types
        run: pnpm tsc --pretty

      - name: Format
        run: pnpm prettier --check .

  build:
    name: Build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [webhooks, worker]

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Build image
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          context: .
          push: false
          file: ./services/${{ matrix.service }}/Dockerfile
          tags: eci_${{ matrix.service }}:latest
          build-args: commit_sha=${{ github.sha }}
          outputs: type=docker,dest=/tmp/${{ matrix.service }}.tar
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new

      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

      # export docker images to be used in next jobs below
      - name: Upload image ${{ matrix.service }} as artifact
        uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.service }}
          path: /tmp/${{ matrix.service }}.tar
          retention-days: 1

  release-worker:
    name: Release worker
    needs:
      - build
      - test
      - e2e
    runs-on: ubuntu-latest
    env:
      REGISTRY: ghcr.io

    steps:
      - name: Load images from artifacts
        uses: actions/download-artifact@v2
        with:
          path: images

      - name: Load docker images
        run: |
          docker load -i images/worker/worker.tar

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository }}/worker
      - name: Tag image
        run: docker tag eci_worker ${{ steps.meta.outputs.tags }}

      - name: Push image
        run: docker push ${{ steps.meta.outputs.tags }}

  e2e:
    name: Integration
    needs:
      - test
      - build
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      max-parallel: 1
      matrix:
        saleor: [
            "registry.gitlab.com/trieb.work/saleor:3.0.0-b.13-triebwork1", #v3 custom
            "ghcr.io/saleor/saleor:3.0.0-b.27",
          ]

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - uses: actions/setup-node@v2
        with:
          node-version: 16
      - name: Cache pnpm modules
        uses: actions/cache@v2
        with:
          path: ~/.pnpm-store
          key: ${{ runner.os }}-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-

      - uses: pnpm/action-setup@v2.0.1
        with:
          version: latest

      # load docker images from build jobs
      - name: Load images from artifacts
        uses: actions/download-artifact@v2
        with:
          path: images

      - name: Load docker images
        run: |
          docker load -i images/webhooks/webhooks.tar
          docker load -i images/worker/worker.tar

      - uses: actions/cache@v2
        with:
          path: "**/node_modules"
          key: ${{ runner.os }}-modules-${{ hashFiles('**/pnpm.lock') }}

      - name: Install dependencies
        run: pnpm install

        # Necesarry to test against the predefined saleor versions
      - name: Use docker-compose ci config
        run: cp docker-compose.ci.yml docker-compose.override.yml

      - name: Start services
        run: docker-compose up -d
        env:
          SALEOR_IMAGE: ${{ matrix.saleor }}
          DATABASE_URL: postgres://postgres:postgres@db.eci:5432/postgres
          DATABASE_URL_POOL: postgres://postgres:postgres@db.eci:5432/postgres
          ECI_BASE_URL: http://localhost:3000
          ECI_BASE_URL_FROM_CONTAINER: http://webhooks.eci:3000
          SALEOR_URL: http://localhost:8000/graphql/
          SALEOR_URL_FROM_CONTAINER: http://saleor.eci:8000/graphql/
          ZOHO_CLIENT_SECRET: ${{ secrets.ZOHO_CLIENT_SECRET }}
          ZOHO_CLIENT_ID: ${{ secrets.ZOHO_CLIENT_ID }}
          ZOHO_ORG_ID: ${{ secrets.ZOHO_ORG_ID }}
          ECI_ENV: ci
          VERCEL_TOKEN: ${{secrets.VERCEL_TOKEN}}
          KAFKA_BROKER_URL: "kafka:9092"

      - name: Migrate saleor schema
        run: make migrate-saleor

      - name: Migrate eci schema
        run: make db-push
        env:
          DATABASE_URL: postgres://postgres:postgres@localhost:5432/postgres

      - name: Generate code
        run: make build

      - name: Test
        run: pnpm jest
        env:
          DATABASE_URL: postgres://postgres:postgres@localhost:5432/postgres

      - run: docker-compose logs
        if: always()
