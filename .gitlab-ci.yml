variables:   

  # Enabled:
  STAGING_ENABLED: 1
  CI_KUBERNETES_ACTIVE: 1

stages:
  - review
  - staging
  - production
  - cleanup


.auto-deploy:
  before_script:
    - set +e && chmod 600 $CI_PROJECT_DIR.tmp/KUBECONFIG && set -e
    - if [ -n "$KUBE_CONTEXT" ]; then kubectl config use-context "$KUBE_CONTEXT"; fi
    - chmod 400 $KUBECONFIG
  image: "registry.gitlab.com/gitlab-org/cluster-integration/auto-deploy-image:v2.48.0"
  dependencies: []



## Review job is deploying automatically on every push to "staging" branch
review:
  extends: .auto-deploy
  stage: review
  environment:
    name: review/$CI_COMMIT_REF_NAME
    # Bullboard URL
    url: https://$AUTO_DEVOPS_COMMON_NAME
    on_stop: stop_review
  artifacts:
    paths:
      - variables.env
    expire_in: 1 week  
  script:

    - helm repo add azure-marketplace https://marketplace.azurecr.io/helm/v1/repo
    # Add a redis deployment with nodeport service, limit CPU and memory, set a password, set standard persistent storage 3 GB. Name: redis-schemabase-staging
    - helm upgrade --install --create-namespace -n $KUBE_NAMESPACE redis-schemabase-staging azure-marketplace/redis --set architecture="standalone" --set auth.password="$REDIS_PASSWORD" --set resources.requests.cpu=100m --set resources.requests.memory=128Mi --set resources.limits.cpu=200m --set resources.limits.memory=256Mi --set persistence.size=3Gi --set service.type=NodePort
 
    - >
          helm upgrade worker-schemabase-staging ./services/worker/helm-chart
          --install
          --namespace=$KUBE_NAMESPACE
          --set=image.imageName="ghcr.io/trieb-work/schemabase/worker:main"
          --set=eciEnv="staging"
          --set=databaseUrl="$DATABASE_URL"
          --set=signingKey="$SECRET_KEY_WORKER"
          --set=redis.host="redis-schemabase-staging-master"
          --set=redis.password="$REDIS_PASSWORD"
          --set=elasticsearch.host=""
          --set=elasticsearch.username=""
          --set=elasticsearch.password=""
          --set=kafka.brokerUrl="$KAFKA_URL"
          --set=kafka.saslMechanism="scram-sha-256"
          --set=kafka.username="$KAFKA_USERNAME"
          --set=kafka.password="$KAFKA_PASSWORD"
          --set=sendgridApiKey="TO_BE_ADDED"
          --set=secretKey="$SECRET_KEY_WORKER"
    - > 
          helm upgrade queue-dashboard-schemabase ./services/bullboard/helm-chart
          --install
          --namespace=$KUBE_NAMESPACE
          --set=image.imageName="ghcr.io/trieb-work/schemabase/bullboard:main"
          --set=redis.host="redis-schemabase-staging-master"
          --set=redis.password="$REDIS_PASSWORD"
          --set=ingress.host=$CI_PROJECT_ID-$CI_COMMIT_REF_SLUG.gc.review-kencove.com
          --set=google.clientId="$GC_CLIENT_ID"
          --set=google.clientSecret="$GC_CLIENT_SECRET"

    # Generate a DATABASE_URL using the mysql service. Use the public ip address of the kubernetes nodes and the nodeport of the mysql service. The hosts are comma separated.
    - export DATABASE_URL="mysql://schemabase:$MYSQL_PASSWORD@$(kubectl get nodes -o jsonpath='{ $.items[*].status.addresses[?(@.type=="ExternalIP")].address }' | tr ' ' ','):$(kubectl -n $KUBE_NAMESPACE get service mysql-schemabase-staging -o jsonpath='{.spec.ports[?(@.name=="mysql")].nodePort}')/schemabase"
    # persist the database url, so that it can be used in the following jobs. Upload the file to the artifacts.
    - echo "DATABASE_URL=$DATABASE_URL" > variables.env

  rules:
    - if: '$CI_KUBERNETES_ACTIVE == null || $CI_KUBERNETES_ACTIVE == ""'
      when: never
    - if: "$REVIEW_DISABLED"
      when: never
    - if: "($CI_COMMIT_REF_PROTECTED == 'true' || $CI_COMMIT_TAG)"
      when: never
    - if: "$CI_COMMIT_REF_NAME == 'staging'"


review-vercel:
  image: node:18
  stage: review
  needs: ["review"]
  before_script:
    - corepack enable
    - corepack prepare pnpm@latest-8 --activate
    - pnpm config set store-dir .pnpm-store
  cache:
    key:
      files:
        - pnpm-lock.yaml
    paths:
      - .pnpm-store  
  script:
    # Export the DATABASE_URL variable from the review job
    - export $(grep -v '^#' $CI_PROJECT_DIR/variables.env | xargs)
    - pnpm install
    # Setting the DATABASE_URL to the prisma connection string for vercel
    - export DATABASE_URL=$PRISMA_CONNECTION_STRING

    # Deploy the API service to vercel
    - npm install --global vercel
    - vercel --scope kencove pull --yes --environment=preview --token=$VERCEL_TOKEN
    - vercel build --token=$VERCEL_TOKEN
    - export URL="$(vercel deploy --prebuilt --token=$VERCEL_TOKEN --meta gitlabCommitRef=$CI_COMMIT_REF_SLUG --meta gitlabCommitSha=$CI_COMMIT_SHA --meta gitlabDeployment=1 --meta gitlabCommitAuthorName="$GITLAB_USER_NAME" --meta gitlabProjectPath=$CI_PROJECT_PATH)"
    - vercel alias --token=$VERCEL_TOKEN set "$URL" $CI_PROJECT_ID-$CI_COMMIT_REF_SLUG.vc.review-kencove.com --scope $VERCEL_ORG_ID
  rules:
    - if: '$CI_KUBERNETES_ACTIVE == null || $CI_KUBERNETES_ACTIVE == ""'
      when: never
    - if: "$REVIEW_DISABLED"
      when: never
    - if: "($CI_COMMIT_REF_PROTECTED == 'true' || $CI_COMMIT_TAG)"
      when: never
    - if: "$CI_COMMIT_REF_NAME == 'staging'"

## Review job is deploying automatically on every push to "prod" branch
production:
  extends: .auto-deploy
  stage: production
  before_script:
    - corepack enable
    - corepack prepare pnpm@latest-8 --activate
    - pnpm config set store-dir .pnpm-store
  cache:
    key:
      files:
        - pnpm-lock.yaml
    paths:
      - .pnpm-store  
  script: 
    - helm repo add azure-marketplace https://marketplace.azurecr.io/helm/v1/repo
    # Add a redis deployment with nodeport service, limit CPU and memory, set a password, set standard persistent storage 3 GB. Name: redis-schemabase-production
    # Add a mysql deployment with nodeport service, limit CPU and memory, set a password, set standard persistent storage 30 GB. Name: mysql-schemabase-production

    # Deploy the API service to vercel
    - npm install --global vercel
    - vercel pull --yes --environment=production --token=$VERCEL_TOKEN
    - vercel build --token=$VERCEL_TOKEN services/api
    - export URL="$(vercel deploy --prebuilt --prod  --token=$VERCEL_TOKEN --meta gitlabCommitRef=$CI_COMMIT_REF_SLUG --meta gitlabCommitSha=$CI_COMMIT_SHA --meta gitlabDeployment=1 --meta gitlabCommitAuthorName="$GITLAB_USER_NAME" --meta gitlabProjectPath=$CI_PROJECT_PATH)"
    - vercel alias --token=$VERCEL_TOKEN set "$URL" $CI_PROJECT_ID-$CI_COMMIT_REF_SLUG.vc.review-kencove.com --scope $VERCEL_ORG_ID
  environment:
    name: production
    # Bullboard URL
    url: ""
  rules:
    - if: '$CI_KUBERNETES_ACTIVE == null || $CI_KUBERNETES_ACTIVE == ""'
      when: never
    - if: '$CI_COMMIT_REF_NAME == "prod"' 

stop_review:
  extends: .auto-deploy
  stage: cleanup
  variables:
    GIT_STRATEGY: none
  script:
    - auto-deploy delete
  environment:
    name: review/$CI_COMMIT_REF_NAME
    action: stop
  allow_failure: true
  rules:
    - if: '$CI_KUBERNETES_ACTIVE == null || $CI_KUBERNETES_ACTIVE == ""'
      when: never
    - if: '$CI_COMMIT_BRANCH == "v1"'
      when: never
    - if: "$REVIEW_DISABLED"
      when: never
    - if: "$CI_COMMIT_TAG || $CI_COMMIT_BRANCH"
      when: manual


