{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./apps/worker/src/main.ts","webpack:///./apps/worker/src/service.ts","webpack:///./libs/events/client/src/index.ts","webpack:///./libs/events/client/src/lib/errors.ts","webpack:///./libs/events/client/src/lib/queue.ts","webpack:///./libs/events/client/src/lib/signature.ts","webpack:///./libs/events/strapi/src/index.ts","webpack:///./libs/events/strapi/src/lib/consumer.ts","webpack:///./libs/events/strapi/src/lib/producer.ts","webpack:///./libs/events/strapi/src/lib/types.ts","webpack:///./libs/events/strapi/src/lib/validation/entry.ts","webpack:///./libs/util/errors/src/index.ts","webpack:///./libs/util/errors/src/lib/base.ts","webpack:///./libs/util/errors/src/lib/context.ts","webpack:///./libs/util/errors/src/lib/env.ts","webpack:///./libs/util/errors/src/lib/http.ts","webpack:///./libs/util/logger/src/index.ts","webpack:///./libs/util/logger/src/lib/logger.ts","webpack:///./libs/util/logger/src/lib/noop.ts","webpack:///external \"@chronark/env\"","webpack:///external \"@elastic/ecs-winston-format\"","webpack:///external \"bullmq\"","webpack:///external \"crypto\"","webpack:///external \"tslib\"","webpack:///external \"winston\"","webpack:///external \"winston-elasticsearch\"","webpack:///external \"zod\""],"names":[],"mappings":"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","file":"main.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","import { Signer } from \"@eci/events/client\";\nimport { Logger } from \"@eci/util/logger\";\nimport { Worker } from \"./service\";\nimport * as strapi from \"@eci/events/strapi\";\nimport { env } from \"@chronark/env\";\n\nconst logger = new Logger({\n  meta: {\n    traceId: \"\",\n  },\n  enableElastic: false,\n});\n\nconst signer = new Signer({ signingKey: env.require(\"SIGNING_KEY\") });\n\nconst strapiConsumer = new strapi.Consumer({\n  signer,\n  logger,\n  connection: {\n    host: env.require(\"REDIS_HOST\"),\n    port: env.require(\"REDIS_PORT\"),\n  },\n});\n\nconst worker = new Worker({\n  logger,\n  sources: {\n    strapi: {\n      consumer: strapiConsumer,\n      handlers: [\n        {\n          topic: strapi.Topic.ENTRY_CREATE,\n          handler: async (message) => {\n            console.log(message);\n          },\n        },\n      ],\n    },\n  },\n});\nworker.start();\n","import { Logger } from \"@eci/util/logger\";\nimport { IConsumer, Message } from \"@eci/events/client\";\nimport { Topic, EntryEvent } from \"@eci/events/strapi\";\n\nexport type EventSource<TTopic extends string, TMessage> = {\n  consumer: IConsumer<TTopic, TMessage>;\n  handlers: [{ topic: TTopic; handler: (message: TMessage) => Promise<void> }];\n};\n\nexport type WorkerConfig = {\n  logger: Logger;\n\n  sources: {\n    [name: string]: EventSource<Topic, Message<EntryEvent>>;\n  };\n};\n\nexport class Worker {\n  private logger: Logger;\n  private readonly sources: Record<\n    string,\n    EventSource<Topic, Message<EntryEvent>>\n  >;\n\n  constructor(config: WorkerConfig) {\n    this.logger = config.logger;\n    this.sources = config.sources;\n  }\n\n  start() {\n    this.logger.info(\"Worker starting\");\n    for (const [name, source] of Object.entries(this.sources)) {\n      for (const { topic, handler } of source.handlers) {\n        source.consumer.consume(topic, handler);\n        this.logger.info(`${name}: Started listening for ${topic} events`);\n      }\n    }\n  }\n}\n","export * from \"./lib/signature\";\nexport * from \"./lib/queue\";\nexport * from \"./lib/message\";\n","import { GenericError } from \"@eci/util/errors\";\n\nexport class SignatureError extends GenericError {\n  constructor() {\n    super(\"SignatureError\", \"Signature is invalid\");\n  }\n}\n","import { env } from \"@chronark/env\";\nimport { Worker, Job, Queue } from \"bullmq\";\nimport { SignedMessage, Message } from \"./message\";\n\nimport { ISigner } from \"./signature\";\nimport { ILogger } from \"@eci/util/logger\";\n\nexport type QueueConfig = {\n  name: string;\n\n  signer: ISigner;\n\n  logger: ILogger;\n\n  /**\n   * Redis connection\n   *\n   * If you leave this undefined, it will attempt to connect to localhost\n   */\n  connection: {\n    host: string;\n    port: string;\n    password?: string;\n  };\n};\n\nexport interface IConsumer<TTopic, TMessage> {\n  consume(topic: TTopic, process: (message: TMessage) => Promise<void>): void;\n  /**\n   * Stop receiving new tasks.\n   * The current task will still be finished.\n   */\n  close(): Promise<void>;\n}\n\nexport interface IProducer<TTopic, TMessage> {\n  produce: (topic: TTopic, message: TMessage) => Promise<void>;\n}\n\n/**\n * TTopic: strings that can be topics\n */\nexport class QueueManager<\n  TTopic extends string,\n  TPayload = Record<string, never>,\n> implements\n    IConsumer<TTopic, Message<TPayload>>,\n    IProducer<TTopic, Message<TPayload>>\n{\n  /**\n   * Used to sign and verify messages\n   */\n  private readonly signer: ISigner;\n  private readonly logger: ILogger;\n  /**\n   * The queue prefix.\n   * Each topic will be a unique queue with this prefix and topic name.\n   */\n  private readonly prefix: string;\n\n  private connection: {\n    host: string;\n    port: number;\n    password?: string;\n  };\n\n  private workers: {\n    [topic: string]: Worker<SignedMessage<TPayload>>;\n  };\n  private queues: {\n    [topic: string]: Queue<SignedMessage<TPayload>, void, TTopic>;\n  };\n  constructor(\n    { name, signer, logger, connection }: QueueConfig, // consume: (topic: TTopic, message: Message<TPayload>) => Promise<void>,\n  ) {\n    this.logger = logger;\n    this.prefix = name;\n    this.connection = {\n      host: connection.host,\n      port: parseInt(connection.port, 10),\n      password: connection.password,\n    };\n    this.workers = {};\n    this.queues = {};\n    this.signer = signer;\n  }\n\n  private queueId(topic: TTopic): string {\n    return [\"eci\", env.get(\"NODE_ENV\", \"development\"), this.prefix, topic]\n      .join(\":\")\n      .toLowerCase();\n  }\n\n  public async close(): Promise<void> {\n    await Promise.all(\n      [...Object.values(this.queues), ...Object.values(this.workers)].map(\n        async (q) => {\n          await q.close();\n          await q.disconnect();\n        },\n      ),\n    );\n  }\n\n  public consume(\n    topic: TTopic,\n    receiver: (message: SignedMessage<TPayload>) => Promise<void>,\n  ): void {\n    const id = this.queueId(topic);\n    this.logger.info(\"Creating topic consumer\", { topic: id });\n    /**\n     * Adding multiple workers to a single topic is probably a mistake\n     * and can yield unexpected results.\n     */\n    if (topic in this.workers) {\n      throw new Error(\n        `A worker has already been assigned to handle ${topic} messages`,\n      );\n    }\n    this.workers[topic] = new Worker(id, this.wrapReceiver(receiver), {\n      connection: this.connection,\n      sharedConnection: true,\n    });\n\n    /**\n     * This logging might be overkill. We'll see\n     */\n    this.workers[topic].on(\"error\", (job: Job, reason: string) => {\n      this.logger.error(\"Job failed\", { job, reason });\n    });\n    this.workers[topic].on(\"failed\", (job: Job, reason: string) => {\n      this.logger.error(\"Job failed\", { job, reason });\n    });\n  }\n\n  private wrapReceiver(\n    handler: (message: SignedMessage<TPayload>) => Promise<void>,\n  ): (job: Job<SignedMessage<TPayload>, void, TTopic>) => Promise<void> {\n    return async ({ data }) => {\n      try {\n        this.logger.info(\"Received message\", { message: data });\n        this.signer.verify({ ...data, signature: undefined }, data.signature);\n        await handler(data);\n        this.logger.info(\"Processed message\", { message: data });\n      } catch (err) {\n        this.logger.error(\"Error processing message\", {\n          message: data,\n          error: err.message,\n        });\n      }\n    };\n  }\n\n  /**\n   * Send a message to the queue\n   * a new traceId is generated if not provided\n   */\n  public async produce(\n    topic: TTopic,\n    message: Message<TPayload>,\n  ): Promise<void> {\n    const signedMessage = {\n      ...message,\n      signature: this.signer.sign(message),\n    };\n\n    /**\n     * Create a new queue for this topic if necessary\n     */\n    if (!(topic in this.queues)) {\n      const id = this.queueId(topic);\n      this.logger.debug(`Creating new queue ${id}`);\n      this.queues[topic] = new Queue(id, {\n        connection: this.connection,\n        sharedConnection: true,\n      });\n    }\n    this.logger.debug(\"pushing message\", { signedMessage });\n    await this.queues[topic].add(topic, signedMessage, {\n      // Keep only 1000 the last completed jobs in memory,\n      removeOnComplete: 1000,\n    });\n    this.logger.debug(\"Pushed message\", { signedMessage });\n  }\n}\n","import { createHmac } from \"crypto\";\nimport { SignatureError } from \"./errors\";\n\nexport interface ISigner {\n  sign(data: unknown): string;\n  verify(data: unknown, signature: string): void;\n}\n\nexport type SignerConfig = {\n  signingKey: string;\n};\n\n/**\n * Sign and verify json objects\n */\nexport class Signer implements ISigner {\n  /**\n   * Secret key used to sign the data.\n   */\n  private readonly signingKey: string;\n\n  constructor({ signingKey }: SignerConfig) {\n    this.signingKey = signingKey;\n  }\n\n  /**\n   * Create a signature for the given data.\n   * @param data - object to be signed\n   * @returns\n   */\n  public sign(data: unknown): string {\n    return createHmac(\"sha256\", this.signingKey)\n      .update(JSON.stringify(data))\n      .digest(\"hex\");\n  }\n\n  /**\n   * Verify the data was signed by the given signature.\n   */\n  public verify(data: unknown, expectedSignature: string): void {\n    const signature = this.sign(data);\n    if (signature !== expectedSignature) {\n      throw new SignatureError();\n    }\n  }\n}\n","export * from \"./lib/producer\";\nexport * from \"./lib/consumer\";\nexport * from \"./lib/types\";\n","import { IConsumer, SignedMessage, QueueManager } from \"@eci/events/client\";\nimport {\n  EntryCreateEvent,\n  EntryDeleteEvent,\n  EntryUpdateEvent,\n  EntryEvent,\n} from \"./validation/entry\";\n\nimport { Topic, StrapiQueueConfig } from \"./types\";\n\nexport class Consumer implements IConsumer<Topic, EntryEvent> {\n  private queueManager: QueueManager<Topic, EntryEvent>;\n  constructor(config: StrapiQueueConfig) {\n    this.queueManager = new QueueManager({\n      ...config,\n      name: \"strapi\",\n    });\n  }\n  public async close(): Promise<void> {\n    return await this.queueManager.close();\n  }\n\n  public consume(\n    topic: Topic,\n    process: (message: SignedMessage<EntryEvent>) => Promise<void>,\n  ): void {\n    switch (topic) {\n      case Topic.ENTRY_CREATE:\n        return this.onEntryCreateEvent(process);\n      case Topic.ENTRY_UPDATE:\n        return this.onEntryUpdateEvent(process);\n      case Topic.ENTRY_DELETE:\n        return this.onEntryDeleteEvent(process);\n    }\n  }\n\n  private onEntryCreateEvent(\n    process: (message: SignedMessage<EntryCreateEvent>) => Promise<void>,\n  ): void {\n    this.queueManager.consume(\n      Topic.ENTRY_CREATE,\n      async (message) => await process(message),\n    );\n  }\n\n  private onEntryUpdateEvent(\n    process: (message: SignedMessage<EntryUpdateEvent>) => Promise<void>,\n  ): void {\n    this.queueManager.consume(\n      Topic.ENTRY_UPDATE,\n      async (message) => await process(message),\n    );\n  }\n\n  private onEntryDeleteEvent(\n    process: (message: SignedMessage<EntryDeleteEvent>) => Promise<void>,\n  ): void {\n    this.queueManager.consume(\n      Topic.ENTRY_DELETE,\n      async (message) => await process(message),\n    );\n  }\n}\n","import { IProducer, Message } from \"@eci/events/client\";\nimport { validation, EntryEvent } from \"./validation/entry\";\nimport { Topic, StrapiQueueConfig } from \"./types\";\nimport { QueueManager } from \"@eci/events/client\";\nexport class Producer implements IProducer<Topic, Message<EntryEvent>> {\n  private queueManager: QueueManager<Topic, EntryEvent>;\n  constructor(config: StrapiQueueConfig) {\n    this.queueManager = new QueueManager({ ...config, name: \"strapi\" });\n  }\n\n  /**\n   * Create a new message and add it to the queue.\n   */\n  public async produce(\n    topic: Topic,\n    message: Message<EntryEvent>,\n  ): Promise<void> {\n    validation[topic].parseAsync(message.payload).catch((err) => {\n      throw new Error(`Trying to push malformed event: ${message}, ${err}`);\n    });\n\n    await this.queueManager.produce(topic, message);\n  }\n}\n","import { QueueConfig } from \"@eci/events/client\";\nexport type { EntryEvent } from \"./validation/entry\";\nexport enum Topic {\n  ENTRY_CREATE = \"entry.create\",\n  ENTRY_UPDATE = \"entry.update\",\n  ENTRY_DELETE = \"entry.delete\",\n}\nexport type StrapiQueueConfig = Omit<QueueConfig, \"name\">;\n","import { z } from \"zod\";\nimport { Topic } from \"../types\";\n\nconst entryValidation = z.object({\n  created_at: z.string(),\n  model: z.string(),\n  entry: z.object({\n    id: z.number().int(),\n    created_at: z.string(),\n    updated_at: z.string(),\n  }),\n});\n\nexport const validation: Record<Topic, z.AnyZodObject> = {\n  \"entry.create\": z\n    .object({\n      event: z.enum([\"entry.create\"]),\n    })\n    .merge(entryValidation),\n  \"entry.update\": z\n    .object({\n      event: z.enum([\"entry.update\"]),\n    })\n    .merge(entryValidation),\n  \"entry.delete\": z\n    .object({\n      event: z.enum([\"entry.delete\"]),\n    })\n    .merge(entryValidation),\n};\n\nexport type EntryCreateEvent = z.infer<typeof validation[Topic.ENTRY_CREATE]>;\nexport type EntryUpdateEvent = z.infer<typeof validation[Topic.ENTRY_UPDATE]>;\nexport type EntryDeleteEvent = z.infer<typeof validation[Topic.ENTRY_DELETE]>;\nexport type EntryEvent = EntryCreateEvent | EntryUpdateEvent | EntryDeleteEvent;\n","export * from \"./lib/env\";\nexport * from \"./lib/http\";\nexport * from \"./lib/context\";\nexport * from \"./lib/base\";\n","export abstract class GenericError extends Error {\n  constructor(name: string, message: string) {\n    super(message);\n    this.name = name;\n  }\n}\n","import { GenericError } from \"./base\";\n\nexport class ContextMissingFieldError extends GenericError {\n  /**\n   * @param missingField - The name field that was not set up properly before.\n   */\n  constructor(missingField: string) {\n    super(\n      \"ContextMissingFieldError\",\n      `The context is missing a required field: ${missingField}. Is the context set up in the correct order?`,\n    );\n  }\n}\n","import { GenericError } from \"./base\";\n\nexport class EnvironmentVariableNotFoundError extends GenericError {\n  /**\n   * @param name - The name of the environment variable\n   */\n  constructor(name: string) {\n    super(\n      \"EnvironmentNotFoundError\",\n      `Environment variable \"${name}\" not found.`,\n    );\n  }\n}\n","import { GenericError } from \"./base\";\n\n/**\n * HttpError is used to pass a status code inside nextjs api routes.\n */\nexport class HttpError extends GenericError {\n  public readonly statusCode: number;\n  constructor(statusCode: number, message = \"HttpError\") {\n    super(\"HttpError\", message);\n    this.statusCode = statusCode;\n  }\n}\n","export * from \"./lib/logger\";\nexport * from \"./lib/noop\";\n","import winston from \"winston\";\nimport { ElasticsearchTransport } from \"winston-elasticsearch\";\nimport { env } from \"@chronark/env\";\nimport APMAgent from \"elastic-apm-node/start\";\nimport ecsFormat from \"@elastic/ecs-winston-format\";\n\nexport type Fields = Record<string, unknown>;\n\nexport type LoggerConfig = {\n  meta?: {\n    /**\n     * Unique id for every trace.\n     */\n    traceId?: string;\n  } & Fields;\n\n  enableElastic?: boolean;\n};\n\nexport interface ILogger {\n  with(additionalMeta: Fields): ILogger;\n  debug(message: string, fields?: Fields): void;\n  info(message: string, fields?: Fields): void;\n  warn(message: string, fields?: Fields): void;\n  error(message: string, fields?: Fields): void;\n  flush(): Promise<void>;\n}\n\nexport class Logger implements ILogger {\n  private logger: winston.Logger;\n  private meta: Record<string, unknown>;\n  private elasticSearchTransport?: ElasticsearchTransport;\n  private apm?: typeof APMAgent;\n\n  public constructor(config?: LoggerConfig) {\n    this.meta = {\n      ...config?.meta,\n      env: env.get(\"NODE_ENV\"),\n      commit: env.get(\"VERCEL_GIT_COMMIT_SHA\"),\n    };\n    this.logger = winston.createLogger({\n      transports: [new winston.transports.Console()],\n      format:\n        env.get(\"NODE_ENV\") === \"production\"\n          ? winston.format.json()\n          : winston.format.prettyPrint({ colorize: true }),\n    });\n\n    const isCI = env.get(\"CI\") === \"true\";\n    if (!isCI && config?.enableElastic) {\n      this.debug(\"Enabling elastic transport\");\n      // this.apm ??= APMAgent.start({ serviceName: \"eci-v2\" });\n\n      /**\n       * ECS requires a special logging format.\n       * This overwrites the prettyprint or json format.\n       *\n       * @see https://www.elastic.co/guide/en/ecs-logging/nodejs/current/winston.html\n       */\n      this.logger.format = ecsFormat({ convertReqRes: true });\n      /**\n       * Ships all our logs to elasticsearch\n       */\n      this.elasticSearchTransport = new ElasticsearchTransport({\n        level: \"info\", // log info and above, not debug\n        apm: this.apm,\n        dataStream: true,\n        clientOpts: {\n          node: env.require(\"ELASTIC_LOGGING_SERVER\"),\n          auth: {\n            username: env.require(\"ELASTIC_LOGGING_USERNAME\"),\n            password: env.require(\"ELASTIC_LOGGING_PASSWORD\"),\n          },\n        },\n      });\n      this.logger.add(this.elasticSearchTransport);\n    }\n  }\n\n  /**\n   * Create a child logger with more metadata to be logged.\n   * Existing metadata is carried over unless overwritten\n   */\n  public with(additionalMeta: Fields): ILogger {\n    const copy = Object.assign(\n      Object.create(Object.getPrototypeOf(this)),\n      this,\n    ) as Logger;\n\n    copy.meta = { ...this.meta, ...additionalMeta };\n    return copy;\n  }\n\n  /**\n   * Serialize the message\n   *\n   * The fields will overwrite the default metadata if keys overlap.\n   */\n  private log(level: string, message: string, fields: Fields = {}): void {\n    this.logger.log(level, message, {\n      ...this.meta,\n      ...fields,\n    });\n  }\n\n  public debug(message: string, fields: Fields = {}): void {\n    return this.log(\"debug\", message, fields);\n  }\n\n  public info(message: string, fields: Fields = {}): void {\n    return this.log(\"info\", message, fields);\n  }\n\n  public warn(message: string, fields: Fields = {}): void {\n    return this.log(\"warn\", message, fields);\n  }\n\n  public error(message: string, fields: Fields = {}): void {\n    return this.log(\"error\", message, fields);\n  }\n\n  public async flush(): Promise<void> {\n    await Promise.all([\n      this.elasticSearchTransport?.flush(),\n      this.apm?.flush(),\n    ]);\n  }\n}\n","/* eslint-disable @typescript-eslint/no-unused-vars */\nimport { ILogger, Fields } from \"./logger\";\n\nexport class NoopLogger implements ILogger {\n  public with(_additionalMeta: Fields): ILogger {\n    return new NoopLogger();\n  }\n  public debug(_message: string, _fields: Fields): void {\n    return;\n  }\n  public info(_message: string, _fields: Fields): void {\n    return;\n  }\n  public warn(_message: string, _fields: Fields): void {\n    return;\n  }\n  public error(_message: string, _fields: Fields): void {\n    return;\n  }\n  public flush(): Promise<void> {\n    return Promise.resolve();\n  }\n}\n","module.exports = require(\"@chronark/env\");","module.exports = require(\"@elastic/ecs-winston-format\");","module.exports = require(\"bullmq\");","module.exports = require(\"crypto\");","module.exports = require(\"tslib\");","module.exports = require(\"winston\");","module.exports = require(\"winston-elasticsearch\");","module.exports = require(\"zod\");"],"sourceRoot":""}