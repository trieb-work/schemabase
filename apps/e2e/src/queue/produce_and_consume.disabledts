import { QueueManager, Signer } from "@eci/events-client";
import { NoopLogger } from "@eci/util/logger";
import { randomUUID } from "crypto";
import { idGenerator } from "@eci/util/ids";
describe("produce and consume over redis", () => {
  const logger = new NoopLogger();
  const queueName = randomUUID();
  const topic = "queue-e2e";
  const connection = {
    host: "localhost",
    port: "6379",
  };
  const producer = new QueueManager<string, { hello: string }>({
    name: queueName,
    signer: new Signer(logger),
    logger,
    connection,
  });


  it("can send a message and receive it", async () => {
    let received = false;
    const payload = { hello: "world" };

    const consumer = new QueueManager<string, { hello: string }>({
      name: queueName,
      signer: new Signer(logger),
      logger,
      connection,
    });

    await consumer.waitUntilReady()

    consumer.consume(topic, async (message) => {
      expect(message.payload).toEqual(payload);
    });

    await producer.produce(topic, {
      payload,
      meta: {
        traceId: idGenerator.id("trace"),
      },
    });
    await new Promise(resolve=>{
      producer
    })


    await producer.close();
    await consumer.close();
  }, 20_000);
});
