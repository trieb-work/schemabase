datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialActions"]
}

generator typegraphql {
  provider = "typegraphql-prisma"
}

model MailchimpConfig {
  id String @id @default(uuid())

  // Indicates if the integration is currently enabled.
  // The user might chose to disable it.
  enabled           Boolean @default(false)
  listId            String
  apiToken          String
  storeUrl          String
  storeId           String
  productUrlPattern String
  channel           String
  tenant            Tenant  @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  tenantId          String  @unique
}

model ProductDataFeed {
  id       String @id @default(uuid())
  // The public id used for lookups from incoming webhooks.
  publicId String @default(cuid())

  // Indicates if the integration is currently enabled.
  // The user might chose to disable it.
  enabled Boolean? @default(false)

  productDetailStorefrontURL String?
  tenant                     Tenant  @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  tenantId                   String  @unique
}

model EasyPostConfig {
  id       String @id @default(uuid())
  // The public id used for lookups from incoming webhooks.
  publicId String @default(cuid())

  // Indicates if the integration is currently enabled.
  // The user might chose to disable it.
  enabled                   Boolean?                   @default(false)
  apiToken                  String?
  webhookID                 String?
  tenant                    Tenant                     @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  tenantId                  String                     @unique
  trackAndTraceConfig       TrackAndTraceConfig?       @relation(fields: [trackAndTraceConfigId], references: [id])
  trackAndTraceConfigId     String?                    @unique
  AddressVerificationConfig AddressVerificationConfig?
}

model AddressVerificationConfig {
  id String @id @default(uuid())

  // Indicates if the integration is currently enabled.
  // The user might chose to disable it.
  enabled        Boolean?       @default(false)
  easypost       EasyPostConfig @relation(fields: [easyPostConfId], references: [id])
  easyPostConfId String
}

model BraintreeConfig {
  id String @id @default(uuid())

  // Indicates if the integration is currently enabled.
  // The user might chose to disable it.
  enabled    Boolean @default(false)
  merchantId String
  publicKey  String
  privateKey String
  tenant     Tenant  @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  tenantId   String  @unique
}

model LexofficeConfig {
  id String @id @default(uuid())

  // Indicates if the integration is currently enabled.
  // The user might chose to disable it.
  enabled  Boolean @default(false)
  apiToken String
  tenant   Tenant  @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  tenantId String  @unique
}

model ZohoConfig {
  id String @id @default(uuid())

  // Indicates if the integration is currently enabled.
  // The user might chose to disable it.
  enabled             Boolean @default(false)
  // The public id used for lookups from incoming webhooks.
  publicId            String  @default(cuid())
  orgId               String
  clientId            String
  clientSecret        String
  payPalAccountId     String?
  creditCardAccountId String?
  webhookToken        String  @default(cuid())
  webhookID           String?
  customFunctionID    String?
  tenant              Tenant  @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  tenantId            String  @unique
}

model MailgunConfig {
  id                    String               @id @default(uuid())
  // The public id used for lookups from incoming webhooks.
  publicId              String?              @default(cuid())
  apiToken              String
  fromDomain            String
  fromTitle             String?
  fromEmail             String?
  apiHost               String               @default("api.eu.mailgun.net")
  tenant                Tenant               @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  tenantId              String               @unique
  trackAndTraceConfig   TrackAndTraceConfig? @relation(fields: [trackAndTraceConfigId], references: [id])
  trackAndTraceConfigId String?              @unique
}

model TrackAndTraceConfig {
  id String @id @default(uuid())

  // Indicates if the integration is currently enabled.
  // The user might chose to disable it.
  enabled             Boolean               @default(false)
  // The public id used for lookups from incoming webhooks.
  publicId            String                @default(cuid())
  mailgun             MailgunConfig?
  easypost            EasyPostConfig?
  tenant              Tenant                @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  tenantId            String                @unique
  trackAndTraceEmails TrackAndTraceEmails[]
}

enum Language {
  DE
  EN
}

model TrackAndTraceEmails {
  id                              String              @id @default(uuid())
  language                        Language            @unique @default(DE)
  inTransitEmailEnabled           Boolean
  inTransitEmailSubject           String?
  inTransitEmailTemplateName      String?
  outForDeliveryEmailEnabled      Boolean
  outForDeliveryEmailTemplateName String?
  outForDeliveryEmailSubject      String?
  trackAndTraceConfig             TrackAndTraceConfig @relation(fields: [trackAndTraceConfId], references: [id])
  trackAndTraceConfId             String
}

// Saleor Apps are separate applications that use GraphQL to talk to a Saleor
// server and receive webhooks with event notifications from Saleor.
model SaleorApp {
  id          String @id @default(uuid())
  channelSlug String
  domain      String @unique

  // The saleor application id
  name String
  // appId        String

  // The app token is used to authenticate our requests with saleor.
  // It is obtained when the user registeres a new saleor app.
  // Every request to saleor will include this token in the header
  // `Authorization: Bearer <app-token>`
  appToken String

  // webhookToken String @default(cuid())
  // webhookID    String

  tenant   Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  tenantId String @unique

  @@unique([domain, channelSlug])
}

// One tenant per company
// Every tenant can have multiple connections with every integration.
model Tenant {
  id String @id @default(uuid())
  // customer data etc
  // metadata Metadata

  // Indicates if the integration is currently enabled.
  // The user might chose to disable it.
  enabled         Boolean               @default(false)
  // baseUrl         String
  saleorApps          SaleorApp[]
  zoho            ZohoConfig[]
  productdatafeed ProductDataFeed[]
  mailchimp       MailchimpConfig[]
  easypost        EasyPostConfig[]
  braintree       BraintreeConfig[]
  lexoffice       LexofficeConfig[]
  trackandtrace   TrackAndTraceConfig[]
  sendgrid        MailgunConfig[]
}

// Internal Redis secrets used by our services.
model RedisConfig {
  id       String @id @default(uuid())
  host     String
  password String
  port     Int
}

// Internal Elastic secrets used by our services.
model ElasticConfig {
  id             String @id @default(uuid())
  apmServer      String
  apmSecretToken String
  loggingServer  String
}

// Internal GoogleOAuth secrets used by our services.
model GoogleOAuthConfig {
  id           String @id @default(uuid())
  clientId     String
  clientSecret String
}
