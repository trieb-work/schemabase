datasource db {
  provider = "postgresql"
  url      = "postgresql://postgres:postgres@localhost:5432/postgres"
}

generator client {
  provider = "prisma-client-js"
}

generator typegraphql {
  provider = "typegraphql-prisma"
}

model MailchimpConfig {
  id                Int        @id @default(autoincrement())
  active            Boolean?   @default(false)
  listId            String?
  apiToken          String?
  storeUrl          String?
  storeId           String?
  productUrlPattern String?
  channel           String?
  appConfig         AppConfig? @relation(fields: [appConfigId], references: [id])
  appConfigId       Int?       @unique
}

model ProductDataFeed {
  id                         Int       @id @default(autoincrement())
  cuid                       String    @default(cuid())
  active                     Boolean?  @default(false)
  productDetailStorefrontURL String?
  channel                    String?
  appConfig                  AppConfig @relation(fields: [appConfigId], references: [id])
  appConfigId                Int       @unique
}

model EasyPostConfig {
  id                      Int                      @id @default(autoincrement())
  cuid                    String                   @default(cuid())
  active                  Boolean?                 @default(false)
  apiToken                String?
  webhookID               String?
  appConfig               AppConfig                @relation(fields: [appConfigId], references: [id])
  appConfigId             Int                      @unique
  trackAndTraceConfig     TrackAndTraceConfig?       @relation(fields: [trackAndTraceConfigId], references: [id])
  trackAndTraceConfigId   Int?                     @unique
  AddressVerificationConfig AddressVerificationConfig?
}

model AddressVerificationConfig {
  id             Int          @id @default(autoincrement())
  active         Boolean?     @default(false)
  easypost       EasyPostConfig @relation(fields: [easyPostConfId], references: [id])
  easyPostConfId Int
}

model BraintreeConfig {
  id          Int       @id @default(autoincrement())
  active      Boolean   @default(false)
  merchantId  String?
  publicKey   String?
  privateKey  String?
  appConfig   AppConfig @relation(fields: [appConfigId], references: [id])
  appConfigId Int       @unique
}

model LexofficeConfig {
  id          Int       @id @default(autoincrement())
  active      Boolean   @default(false)
  apiToken    String?
  appConfig   AppConfig @relation(fields: [appConfigId], references: [id])
  appConfigId Int       @unique
}

model ZohoConfig {
  id                  Int       @id @default(autoincrement())
  active              Boolean?  @default(false)
  cuid                String    @default(cuid())
  orgId               String?   @default("")
  clientId            String?   @default("")
  clientSecret        String?   @default("")
  payPalAccountId     String?
  creditCardAccountId String?
  webhookToken        String    @default(cuid())
  webhookID           String?
  customFunctionID    String?
  appConfig           AppConfig @relation(fields: [appConfigId], references: [id])
  appConfigId         Int       @unique
}

model MailgunConfig {
  id                    Int                @id @default(autoincrement())
  cuid                  String?            @default(cuid())
  apiToken              String
  fromDomain            String
  fromTitle             String?
  fromEmail             String?
  apiHost               String             @default("api.eu.mailgun.net")
  appConfig             AppConfig?         @relation(fields: [appConfigId], references: [id])
  appConfigId           Int?               @unique
  trackAndTraceConfig   TrackAndTraceConfig? @relation(fields: [trackAndTraceConfigId], references: [id])
  trackAndTraceConfigId Int?               @unique
}

model TrackAndTraceConfig {
  id                  Int                   @id @default(autoincrement())
  active              Boolean?              @default(false)
  cuid                String                @default(cuid())
  mailgun             MailgunConfig?
  easypost            EasyPostConfig?
  appConfig           AppConfig             @relation(fields: [appConfigId], references: [id])
  appConfigId         Int                   @unique
  trackAndTraceEmails TrackAndTraceEmails[]
}

enum Language {
  DE
  EN
}

model TrackAndTraceEmails {
  id                              Int               @id @default(autoincrement())
  language                        Language          @unique @default(DE)
  inTransitEmailEnabled           Boolean?
  inTransitEmailSubject           String?
  inTransitEmailTemplateName      String?
  outForDeliveryEmailEnabled      Boolean?
  outForDeliveryEmailTemplateName String?
  outForDeliveryEmailSubject      String?
  trackAndTraceConfig               TrackAndTraceConfig @relation(fields: [trackAndTraceConfId], references: [id])
  trackAndTraceConfId             Int
}

model SaleorConfig {
  id           Int       @id @default(autoincrement())
  domain       String?   @unique
  appId        String?
  authToken    String?
  webhookToken String    @default(cuid())
  webhookID    String?
  appConfig    AppConfig @relation(fields: [appConfigId], references: [id])
  appConfigId  Int       @unique
}

model AppConfig {
  id              Int                @id @default(autoincrement())
  active          Boolean?
  baseUrl         String?
  saleor          SaleorConfig?
  zoho            ZohoConfig?
  productdatafeed ProductDataFeed?
  mailchimp       MailchimpConfig?
  easypost        EasyPostConfig?
  braintree       BraintreeConfig?
  lexoffice       LexofficeConfig?
  trackandtrace   TrackAndTraceConfig?
  mailgun         MailgunConfig?
}

// Common / General Config Parameters
model RedisConfig {
  id             Int          @id @default(autoincrement())
  host           String
  password       String
  port           Int
  commonConfig   CommonConfig @relation(fields: [commonConfigId], references: [id])
  commonConfigId Int
}

model ElasticConfig {
  id             Int          @id @default(autoincrement())
  apmServer      String?
  apmSecretToken String?
  loggingServer  String?
  commonConfig   CommonConfig @relation(fields: [commonConfigId], references: [id])
  commonConfigId Int
}

model GoogleOAuth {
  id             Int          @id @default(autoincrement())
  clientId       String
  clientSecret   String
  commonConfig   CommonConfig @relation(fields: [commonConfigId], references: [id])
  commonConfigId Int
}

model CommonConfig {
  id            Int          @id @default(autoincrement())
  googleOAuth   GoogleOAuth?
  redis         RedisConfig?
  elasticsearch ElasticConfig?
}
