//// ------------------------------------------------------
//// THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
//// ------------------------------------------------------

Table eci_User {
  id String [pk]
  name String [note: 'A user\'s fullname']
  email String [unique, not null]
  password String
  eci_User_Tenants eci_User_Tenant [not null, note: 'The tenants, that the user is member of']

  Note: 'ECI Internal models are prefixed with eci_ - these models store internal data like ECI users
'
}

Table eci_User_Tenant {
  id String [pk]
  createdAt DateTime [default: `now()`, not null]
  updatedAt DateTime [not null]
  user eci_User [not null]
  userId String [not null]
  tenant Tenant [not null]
  tenantId String [not null]
  role eci_User_Tenant_Role [not null]

  Note: 'Mapping of user to tenant and their related rights. User tenant membership'
}

Table Cookies {
  id String [pk]
  key String [not null]
  value String [not null]
  installedSaleorApp InstalledSaleorApp
  installedSaleorAppId String

  Note: 'ECI Internal model to store cookies / additional headers, that
might be needed for some apps'
}

Table SaleorOrder {
  id String [not null, note: 'Saleor Internal Id']
  createdAt DateTime [not null]
  order Order [not null]
  orderId String [not null]
  orderNumber String [not null]
  installedSaleorApp InstalledSaleorApp [not null]
  installedSaleorAppId String [not null]
  saleorPayment SaleorPayment [not null]

  indexes {
    (id, installedSaleorAppId) [unique]
    (orderId, installedSaleorAppId) [unique]
  }
}

Table SaleorPackage {
  id String [not null, note: 'Saleor Internal Id']
  createdAt DateTime [not null]
  package Package [not null]
  packageId String [not null]
  installedSaleorApp InstalledSaleorApp [not null]
  installedSaleorAppId String [not null]

  indexes {
    (id, installedSaleorAppId) [unique]
  }
}

Table SaleorFulfillmentLine {
  id String [not null, note: 'Saleor Internal Id']
  packagelineItem PackageLineItem [not null]
  packageLineItemId String [not null]
  installedSaleorApp InstalledSaleorApp [not null]
  installedSaleorAppId String [not null]

  indexes {
    (id, installedSaleorAppId) [unique]
  }
}

Table SaleorOrderLineItem {
  id String [not null, note: 'Saleor Internal Id']
  orderLineItem OrderLineItem [not null]
  orderLineItemId String [not null]
  installedSaleorApp InstalledSaleorApp [not null]
  installedSaleorAppId String [not null]

  indexes {
    (id, installedSaleorAppId) [unique]
  }
}

Table SaleorPayment {
  id String [not null, note: 'Saleor Internal Id']
  createdAt DateTime [not null]
  updatedAt DateTime [not null]
  saleorOrder SaleorOrder
  saleorOrderId String
  payment Payment
  paymentId String
  installedSaleorApp InstalledSaleorApp [not null]
  installedSaleorAppId String [not null]

  indexes {
    (id, installedSaleorAppId) [unique]
  }
}

Table SaleorProductVariant {
  id String [not null, note: 'Saleor internal product variant id']
  productId String [not null, note: 'Saleor internal product Id']
  updatedAt DateTime [not null]
  productVariant ProductVariant [not null]
  productVariantId String [not null]
  installedSaleorApp InstalledSaleorApp [not null]
  installedSaleorAppId String [not null]

  indexes {
    (id, installedSaleorAppId) [unique]
  }
}

Table SaleorWarehouse {
  id String [not null, note: 'Saleor Internal Id']
  warehouse Warehouse [not null]
  warehouseId String [not null]
  installedSaleorApp InstalledSaleorApp [not null]
  installedSaleorAppId String [not null]

  indexes {
    (id, installedSaleorAppId) [unique]
  }
}

Table SaleorPaymentGateway {
  id String [not null, note: 'Saleor Internal Id']
  installedSaleorApp InstalledSaleorApp [not null]
  installedSaleorAppId String [not null]
  paymentMethods PaymentMethod [not null]

  indexes {
    (id, installedSaleorAppId) [unique]
  }
}

Table ZohoItem {
  id String [not null, note: 'Zoho Internal Id']
  createdAt DateTime [not null]
  updatedAt DateTime [not null]
  productVariant ProductVariant [not null]
  productVariantId String [not null]
  zohoApp ZohoApp [not null]
  zohoAppId String [not null]

  indexes {
    (id, zohoAppId) [unique]
  }
}

Table ZohoPackage {
  id String [not null, note: 'Zoho Internal Id']
  shipmentId String
  createdAt DateTime [not null]
  updatedAt DateTime [not null]
  shipmentStatus String
  package Package [not null]
  packageId String [not null]
  zohoApp ZohoApp [not null]
  zohoAppId String [not null]

  indexes {
    (id, zohoAppId) [unique]
  }
}

Table ZohoContact {
  id String [not null]
  createdAt DateTime
  updatedAt DateTime
  datevId Int [note: 'When using the DATEV integration from Zoho Books, this field might come in handy.
/ Needs customFieldDatevContact in ZohoApp set']
  zohoApp ZohoApp [not null]
  zohoAppId String [not null]
  zohoContactPerson ZohoContactPerson [not null]
  zohoSalesOrder ZohoSalesOrder [not null]
  zohoAddress ZohoAddress [not null]

  indexes {
    (id, zohoAppId) [unique]
  }
}

Table ZohoContactPerson {
  id String [not null, note: 'Zoho Internal ContactPerson Id']
  active Boolean [not null, default: true, note: 'Contacts/Contactpersons can be disabled to filter out merged contacts']
  isPrimary Boolean [not null, default: false, note: 'Just one Zoho Contact Person can be primary']
  zohoContact ZohoContact [not null]
  zohoContactId String [not null]
  contact Contact [not null]
  contactId String [not null]
  email String
  zohoApp ZohoApp [not null]
  zohoAppId String [not null]
  zohoSalesOrders ZohoSalesOrder [not null]

  indexes {
    (id, zohoAppId) [unique]
  }
}

Table ZohoAddress {
  id String [not null, note: 'Zoho internal Address id']
  address Address [not null]
  addressId String [not null]
  zohoContact ZohoContact [note: 'Zoho Addresses are valid only per zoho contact. Sometimes, we have different
customers with the same address. To not get any issues, we need to store the customer id']
  zohoContactId String
  zohoApp ZohoApp [not null]
  zohoAppId String [not null]

  indexes {
    (id, zohoAppId) [unique]
  }
}

Table ZohoSalesOrder {
  id String [not null, note: 'Zoho Internal Id']
  createdAt DateTime [not null]
  updatedAt DateTime [not null]
  zohoContact ZohoContact
  zohoContactId String
  order Order [not null]
  orderId String [not null, note: 'The ECI internal order ID ']
  zohoApp ZohoApp [not null]
  zohoAppId String [not null]
  zohoContactPerson ZohoContactPerson
  zohoContactPersonId String
  zohoContactPersonZohoAppId String

  indexes {
    (id, zohoAppId) [unique]
  }
}

Table ZohoInvoice {
  id String [not null, note: 'Zoho Internal Id']
  createdAt DateTime [not null]
  updatedAt DateTime [not null]
  number String [not null]
  invoice Invoice [not null]
  invoiceId String [not null]
  zohoApp ZohoApp [not null]
  zohoAppId String [not null]

  indexes {
    (id, zohoAppId) [unique]
    (number, zohoAppId) [unique]
  }
}

Table ZohoPayment {
  id String [not null, note: 'Zoho Internal Id']
  createdAt DateTime [not null]
  updatedAt DateTime [not null]
  payment Payment
  paymentId String [unique]
  zohoApp ZohoApp [not null]
  zohoAppId String [not null]

  indexes {
    (id, zohoAppId) [unique]
  }

  Note: 'Zoho specific model.'
}

Table ZohoBankAccount {
  id String [not null, note: 'Zoho Internal Bankacount Id']
  name String [not null]
  currency Currency [not null]
  active Boolean [not null, default: true]
  paymentMethod PaymentMethod
  paymentMethodId String
  zohoApp ZohoApp [not null]
  zohoAppId String [not null]

  indexes {
    (id, zohoAppId) [unique]
  }
}

Table ZohoWarehouse {
  id String [not null, note: 'Zoho Internal Id']
  warehouse Warehouse [not null]
  warehouseId String [not null]
  zohoApp ZohoApp [not null]
  zohoAppId String [not null]

  indexes {
    (id, zohoAppId) [unique]
  }
}

Table ZohoTax {
  id String [not null, note: 'internal ID of tax in Zoho']
  tax Tax [not null]
  taxId String [not null, note: 'ID of eci internal Tax Object']
  name String [note: 'The name could be used to match a tax better when multiple taxes exist']
  zohoApp ZohoApp [not null]
  zohoAppId String [not null]

  indexes {
    (id, zohoAppId) [unique]
  }
}

Table ZohoOrderLineItem {
  id String [not null, note: 'Zoho Internal Id']
  orderLineItem OrderLineItem [not null]
  orderLineItemId String [not null]
  zohoApp ZohoApp [not null]
  zohoAppId String [not null]

  indexes {
    (id, zohoAppId) [unique]
  }
}

Table ZohoPackageLineItem {
  id String [not null, note: 'Zoho Internal Id']
  packagelineItem PackageLineItem [not null]
  packagelineItemId String [not null]
  zohoApp ZohoApp [not null]
  zohoAppId String [not null]
  orderLineItem OrderLineItem
  orderLineItemId String

  indexes {
    (id, zohoAppId) [unique]
  }
}

Table Invoice {
  id String [pk]
  createdAt DateTime [default: `now()`, not null]
  updatedAt DateTime [not null]
  invoiceNumber String [not null]
  invoiceTotalGross Float [not null]
  invoiceCurrency Currency [not null]
  payments Payment [not null]
  tenant Tenant [not null]
  tenantId String [not null]
  orders Order [not null]
  zohoInvoice ZohoInvoice [not null]
  mainContact Contact [note: 'The person who has created this Invoice (In other systems this can also be a Useraccount)']
  mainContactId String

  indexes {
    (invoiceNumber, tenantId) [unique]
  }
}

Table DatevContact {
  id String [pk]
  datevNummer Int [not null, note: 'The datev ID has to follow the DATEV rules: for SKR04 10000-69999 = debitoren, 
70000-99999 = Kreditoren']
  type DatevContactType [not null]
  contact Contact [not null]
  contactId String [not null]
  datevApp DatevApp [not null]
  datevAppId String [not null]
}

Table Tax {
  id String [pk]
  createdAt DateTime [default: `now()`, not null]
  updatedAt DateTime [not null]
  name String [not null]
  normalizedName String [not null]
  percentage Float [not null]
  shippingTaxInOrders Order [not null, note: 'An array of orders where this tax is used as the tax for the shipping method']
  taxInLineItems OrderLineItem [not null, note: 'An array of lineitems where this tax is used as the tax for the line item']
  productVariants ProductVariant [not null]
  tenant Tenant [not null]
  tenantId String [not null]
  zohoTaxes ZohoTax [not null]

  indexes {
    (normalizedName, tenantId) [unique]
    (percentage, tenantId) [unique]
  }
}

Table Payment {
  id String [pk, note: 'eci internal id']
  createdAt DateTime [default: `now()`, not null]
  updatedAt DateTime [not null]
  referenceNumber String [not null, note: 'Unique identifier for a customer payment. We use the payment gateway id as reference.']
  date DateTime [note: 'The order date. You can also create an order in the past for example. 
Some systems just use a date here']
  amount Float [not null]
  transactionFee Float [not null, default: 0, note: 'Costs for this transaction, for example bank charges, gateway charges, paypal charges']
  order Order
  orderId String
  mainContact Contact [note: 'The person who has created this Payment (In other systems this can also be a Useraccount)']
  mainContactId String
  tenant Tenant [not null]
  tenantId String [not null]
  paymentMethod PaymentMethod [not null]
  paymentMethodId String [not null]
  invoices Invoice [not null]
  zohoPayment ZohoPayment [not null]
  saleorPayment SaleorPayment [not null]
  braintreeTransactions BraintreeTransaction [not null]

  indexes {
    (referenceNumber, tenantId) [unique]
  }

  Note: 'The ECI internal payments model'
}

Table PaymentMethod {
  id String [pk]
  createdAt DateTime [default: `now()`, not null]
  updatedAt DateTime [not null]
  gatewayType GatewayType [not null]
  methodType PaymentMethodType [not null]
  currency Currency [not null]
  saleorPaymentGateway SaleorPaymentGateway
  saleorPaymentGatewayId String
  saleorPaymentGatewayInstalledSaleorAppId String
  zohoBankAccounts ZohoBankAccount [not null, note: 'One internal payment method can have multiple Zoho Bank Accounts. Internally, we know for example just "banktransfer" but in Zoho we might have multiple
bank Accounts']
  payments Payment [not null]
  tenant Tenant [not null]
  tenantId String [not null]

  indexes {
    (gatewayType, methodType, currency, tenantId) [unique]
  }

  Note: 'Internal representation of payment methods. We try to normalize different payment types to more generic ones.'
}

Table Company {
  id String [pk]
  createdAt DateTime [default: `now()`, not null]
  updatedAt DateTime [not null]
  name String [not null]
  normalizedName String [not null]
  contacts Contact [not null]
  tenant Tenant [not null]
  tenantId String [not null]

  indexes {
    (name, tenantId) [unique]
    (normalizedName, tenantId) [unique]
  }
}

Table Contact {
  id String [pk]
  createdAt DateTime [default: `now()`, not null]
  updatedAt DateTime [not null]
  email String [not null]
  firstName String
  lastName String
  customer Boolean [not null, default: true, note: 'is this contact a customer / debitor? Can be customer and/or vendor']
  vendor Boolean [not null, default: false, note: 'is this contact a vendor / kreditor? Can be customer and/or vendor']
  orders Order [not null]
  invoices Invoice [not null]
  payments Payment [not null]
  company Company [note: 'A Contact can be related to one company']
  companyId String
  tenant Tenant [not null]
  tenantId String [not null]
  zohoContactPersons ZohoContactPerson [not null]
  datevContacts DatevContact [not null]
  addresses Address [not null]
  trackingEmailsConsent Boolean [not null, default: true, note: 'If we have the users permission to send tracking emails']
  marketingEmailsConstent Boolean [not null, default: false, note: 'If we have the users consent to send marketing emails']

  indexes {
    (email, tenantId) [unique]
  }

  Note: 'The ECI internal contact model. One contact has one E-Mail address only. E-Mail addresses are unique per tenant. In some systems the Contact is equal to Users or Accounts'
}

Table Warehouse {
  id String [pk]
  createdAt DateTime [default: `now()`, not null]
  updatedAt DateTime [not null]
  name String [not null]
  normalizedName String [not null]
  tenant Tenant [not null]
  tenantId String [not null]
  zohoWarehouse ZohoWarehouse [not null]
  saleorWarehouse SaleorWarehouse [not null]
  xentralProxyApp XentralProxyApp [not null]
  installedSaleorApp InstalledSaleorApp [not null]
  packageLineItems PackageLineItem [not null]
  stockEntries StockEntries [not null]
  isDefaultWarehouseOf ProductVariant [not null]

  indexes {
    (name, tenantId) [unique]
    (normalizedName, tenantId) [unique]
  }
}

Table OrderLineItem {
  id String [pk]
  createdAt DateTime [default: `now()`, not null]
  updatedAt DateTime [not null]
  uniqueString String [not null]
  itemOrder Int [note: 'The order of this line item in the order. Starts with 1']
  order Order [not null]
  orderId String [not null]
  quantity Float [not null]
  sku String [not null]
  tax Tax [not null]
  taxId String [not null]
  totalPriceNet Float [note: 'The total net price (price excluding taxes) of all line item. Optional, as we might have just one of the two values on hand']
  totalPriceGross Float [note: 'The total gross price (price including taxes) of all line item. Optional, as we might have just one of the two values on hand']
  undiscountedUnitPriceNet Float [note: 'The unit net price (price excluding taxes) of one line item. Optional, as we might have just one of the two values on hand']
  undiscountedUnitPriceGross Float [note: 'The unit gross price (price including taxes) of one line item. Optional, as we might have just one of the two values on hand']
  discountValueNet Float [not null, default: 0, note: 'The disount amount, that is applied to the net price (discount excluding taxes).']
  productVariant ProductVariant [not null, note: 'The disount amount, that is applied to the gross price (discount including taxes).']
  productVariantId String [not null]
  tenant Tenant [not null]
  tenantId String [not null]
  zohoPackageLineItems ZohoPackageLineItem [not null]
  saleorOrderLineItems SaleorOrderLineItem [not null]
  zohoOrderLineItems ZohoOrderLineItem [not null]

  indexes {
    (uniqueString, tenantId) [unique]
  }
}

Table PackageLineItem {
  id String [pk]
  createdAt DateTime [default: `now()`, not null]
  updatedAt DateTime [not null]
  uniqueString String [not null]
  warehouse Warehouse
  warehouseId String
  package Package
  packageId String
  quantity Float [not null]
  sku String [not null]
  productVariant ProductVariant [not null]
  tenant Tenant [not null]
  tenantId String [not null]
  zohoPackageLineItems ZohoPackageLineItem [not null]
  saleorFulfillmentsLines SaleorFulfillmentLine [not null]

  indexes {
    (uniqueString, tenantId) [unique]
  }
}

Table Order {
  id String [pk]
  createdAt DateTime [default: `now()`, not null]
  updatedAt DateTime [not null]
  date DateTime [not null, note: 'The order date. You can also create an order in the past for example. 
Some systems just use a date here']
  expectedShippingDate DateTime [note: 'The Date, that we expect this order to be shipped.']
  carrier Carrier [note: 'The expected shipment carrier for this order']
  customerNote String [note: 'Add messages, that will be printed on order and shipping documents for the customer. We are hitting text limits  strangely, so we added @db.Text']
  orderStatus OrderStatus [not null, default: 'draft']
  paymentStatus OrderPaymentStatus [not null, default: 'unpaid']
  shipmentStatus OrderShipmentStatus [not null, default: 'pending']
  invoiceStatus OrderInvoiceStatus [not null, default: 'notInvoiced']
  readyToFullfill Boolean [not null, default: false, note: 'In PuF: if the Order is not readyToFullfill it woll not get transfered to logistics partner (kramer); default is false']
  token String [note: 'An order token, that can be used to pull this order unauthenticated.
can be manually set, but we also use a cuid by default']
  orderNumber String [not null, note: 'Order-Numbers have to be unique per Tenant!
We use them as unique identifier between systems']
  referenceNumber String [note: 'if source system has a second ID which is benefitial to the user, we can provide it here']
  orderLineItems OrderLineItem [not null]
  shippingPriceNet Float
  shippingPriceGross Float
  shippingPriceTax Tax
  shippingPriceTaxId String
  discountCode String [note: 'The applied discount code']
  discountValueNet Float [not null, default: 0, note: 'The disount amount, that is applied
to the net, undiscounted subtotal price.
Discounts never get applied on shipping costs']
  discountValueNetPercentage Float [not null, default: 0, note: 'The disount percentage, that is applied
to the net, undiscounted subtotal price.
Discounts never get applied on shipping costs']
  totalPriceNet Float
  totalPriceGross Float [not null]
  mainContact Contact [not null, note: 'The person who has created this Order (In other systems this can also be a Useraccount)']
  mainContactId String [not null]
  firstName String [note: 'First and Lastname as extra fields only for this order. The main contact is not sufficient here
fields are used for example for tracking notifications']
  lastName String
  trackingNotificationsEnabled Boolean [not null, default: true, note: 'We can disable tracking notifications on user, order and package level']
  language Language [not null, default: 'DE']
  packages Package [not null]
  shippingAddress Address
  shippingAddressId String
  billingAddress Address
  billingAddressId String
  tenant Tenant [not null]
  tenantId String [not null]
  payments Payment [not null]
  saleorOrders SaleorOrder [not null]
  zohoSalesOrders ZohoSalesOrder [not null]
  xentralProxyAuftraege XentralProxyAuftrag [not null]
  invoices Invoice [not null]

  indexes {
    (orderNumber, tenantId) [unique]
    (id, orderNumber) [unique]
  }
}

Table Address {
  id String [pk]
  createdAt DateTime [default: `now()`, not null]
  updatedAt DateTime [not null]
  isDefault Boolean [note: 'Optional information, if this address is the default for a certain contact.
This information can be used by some systems like Zoho']
  street String
  additionalAddressLine String
  plz String
  city String
  countryCode CountryCode
  countryArea String
  company String
  phone String
  fullname String
  houseNumber String [note: 'Optional field']
  streetWithoutHouseNumber String
  contact Contact [not null, note: 'One address can have multiple contacts connected to it.
Sometimes, you have orders from different email addresses, sending to the same address..']
  tenant Tenant [not null]
  tenantId String [not null]
  normalizedName String [not null, note: 'A unique string identifying this address for easy lookup']
  zohoAddress ZohoAddress [not null, note: 'An array of zoho addresses. Can be multiple if the same address is synced to different zoho apps']
  shippingAddressInOrders Order [not null, note: 'An array of orders where this address is used as the shipping address']
  billingAddressInOrders Order [not null, note: 'An array of orders where this address is used as the billing address']

  indexes {
    (normalizedName, tenantId) [unique]
  }
}

Table Attribute {
  id String [pk]
  createdAt DateTime [default: `now()`, not null]
  updatedAt DateTime [not null]
  name String [not null]
  type AttributeType [not null]
  required Boolean [default: false, note: 'Is the attribute mandatory to be set, or can it be left blank']
  values AttributeValue [not null]
  tenant Tenant [not null]
  tenantId String [not null]
}

Table AttributeValue {
  id String [pk]
  createdAt DateTime [default: `now()`, not null]
  updatedAt DateTime [not null]
  value String [note: 'Represent value of the attribute value (e.g. color values for swatch attributes)']
  attribute Attribute [not null]
  attributeId String [not null]
}

Table Product {
  id String [pk]
  createdAt DateTime [default: `now()`, not null]
  updatedAt DateTime [not null]
  name String [not null]
  normalizedName String [not null]
  hsCode String
  countryOfOrigin CountryCode
  variants ProductVariant [not null]
  tenant Tenant [not null]
  tenantId String [not null]

  indexes {
    (name, tenantId) [unique]
    (normalizedName, tenantId) [unique]
  }
}

Table ProductVariant {
  id String [pk]
  createdAt DateTime [default: `now()`, not null]
  updatedAt DateTime [not null]
  active Boolean [not null, default: true, note: 'Old product variants get disabled']
  sku String [not null]
  variantName String
  ean String
  weight Float [note: 'The weight in KG for this product variant']
  product Product [not null]
  productId String [not null]
  tenant Tenant [not null]
  tenantId String [not null]
  defaultWarehouse Warehouse
  defaultWarehouseId String
  salesTax Tax [note: 'The default tax rate of this article. Might be different for purchase and sales']
  salesTaxId String
  stockEntries StockEntries [not null]
  orderLineItem OrderLineItem [not null]
  packagelineItem PackageLineItem [not null]
  zohoItem ZohoItem [not null]
  xentralArtikel XentralArtikel [not null]
  saleorProductVariant SaleorProductVariant [not null]
  stockOnHand Int
  isBundleProduct Boolean [not null, default: false]
  isProductBundle Boolean [not null, default: false, note: 'if this product is actually a "just-in-time" bundle, not a composite item.
normally, product bundles don\'t allocate stock on the individual products']
  billOfMaterial BillOfMaterial [not null]
  billOfMaterialChilds BillOfMaterial [not null, note: 'deprecated']

  indexes {
    (sku, tenantId) [unique]
    (id, sku) [unique]
  }
}

Table BillOfMaterial {
  id String [pk]
  tenant Tenant [not null]
  tenantId String [not null]
  productVariant ProductVariant [not null]
  productVariantId String [not null]
  part ProductVariant [not null]
  partId String [not null]
  order Int [note: 'Product parts can have a order in which they appear. Is an optional information']
  quantity Int [not null]

  indexes {
    (productVariantId, partId) [unique]
  }
}

Table XentralCarrier {
  id String [pk]
  eciCarrier Carrier [not null]
  name String [not null]
  xentralProxyApp XentralProxyApp [not null]
  xentralProxyAppId String [not null]

  Note: 'Carriers can have different names in Xentral - depending on the manually created shipping zone. We have to match them to our internal carrier
This is a manually created mapping table.'
}

Table XentralArtikel {
  id String [not null, note: 'Xentral Internal ID']
  xentralNummer String [not null]
  xentralProxyApp XentralProxyApp [not null]
  xentralProxyAppId String [not null]
  productVariant ProductVariant [not null]
  productVariantId String [not null]

  indexes {
    (id, xentralProxyAppId) [unique]
    (xentralNummer, xentralProxyAppId) [unique]
  }
}

Table XentralLieferschein {
  id Int [not null, note: 'Xentral Internal ID']
  status String [not null]
  xentralBelegNr String [not null]
  xentralProxyApp XentralProxyApp [not null]
  xentralProxyAppId String [not null]
  package Package [not null]
  packageId String [not null]

  indexes {
    (id, xentralProxyAppId) [unique]
    (xentralBelegNr, xentralProxyAppId) [unique]
  }
}

Table StockEntries {
  id String [pk]
  createdAt DateTime [default: `now()`, not null]
  updatedAt DateTime [not null]
  tenant Tenant [not null]
  tenantId String [not null]
  warehouse Warehouse [not null]
  warehouseId String [not null]
  productVariant ProductVariant [not null]
  productVariantId String [not null]
  actualCommittedStock Int [not null, default: 0, note: 'Physical stock entries; Stock, that is commited in not finished orders']
  actualAvailableStock Int [not null, default: 0, note: 'Total stock in this warehouse right now']
  actualAvailableForSaleStock Int [not null, default: 0, note: 'Total stock that is not commited and ready for sale']

  indexes {
    (warehouseId, productVariantId, tenantId) [unique]
  }
}

Table BraintreeApp {
  id String [pk]
  enabled Boolean [not null, default: true]
  sandbox Boolean [not null, default: false]
  merchantId String [not null]
  publicKey String [not null]
  privateKey String [not null]
  tenant Tenant [not null]
  tenantId String [not null]
  cronSchedule String [not null, default: '*/30 * * * *']
  cronTimeout Int [not null, default: 800]
  braintreeTransactions BraintreeTransaction [not null]

  Note: 'Internal model to store braintree payment gateway settings for tenants'
}

Table BraintreeTransaction {
  id String [not null, note: 'The Braintree internal ID']
  createdAt DateTime [not null]
  updatedAt DateTime [not null]
  payPalTransactionId String [note: 'If this braintree transaction is a paypal payment, we store the paypal transaction id as well']
  status String
  braintreeApp BraintreeApp [not null]
  braintreeAppId String [not null]
  payment Payment [not null]
  paymentId String [not null]

  indexes {
    (id, braintreeAppId) [unique]
  }
}

Table ElasticCluster {
  id String [pk]
  createdAt DateTime [default: `now()`, not null]
  updatedAt DateTime [not null]
  endpoint String [not null]
  username String [not null]
  password String [not null]
  index String
  elasticLogDrainIntegrations ElasticLogDrainIntegration [not null]
}

Table VercelLogDrainApp {
  id String [pk]
  createdAt DateTime [default: `now()`, not null]
  updatedAt DateTime [not null]
  configurationId String [unique, not null]
  installationId String [unique, not null]
  projectId String [unique]
  teamId String
  userId String [not null]
  webhooks IncomingWebhook [not null]
  elasticLogDrainIntegrations ElasticLogDrainIntegration [not null]
}

Table ElasticLogDrainIntegration {
  id String [pk]
  enabled Boolean [not null, default: true]
  subscription Subscription
  subscriptionId String [unique]
  tenant Tenant [not null]
  tenantId String [not null]
  logDrainApp VercelLogDrainApp [not null]
  logDrainAppId String [unique, not null]
  elasticCluster ElasticCluster [not null]
  elasticClusterId String [unique, not null]
}

Table Package {
  id String [pk, note: 'internal id']
  createdAt DateTime [default: `now()`, not null]
  updatedAt DateTime [not null]
  active Boolean [not null, default: true, note: 'If this entity is active or got deleted somewhere']
  carrier Carrier [not null]
  state PackageState [not null, default: 'INIT', note: 'The package shipment state']
  number String [not null, note: 'A unique identifier for this package like PKG-0034']
  trackingId String [note: 'tracking id from the carrier. Optional, as the package can, exist before we created a tracking number']
  carrierTrackingUrl String [note: 'A link to the carriers tracking page']
  order Order [not null]
  orderId String [not null]
  events PackageEvent [not null]
  packageLineItems PackageLineItem [not null, note: 'Line Items in this package']
  zohoPackage ZohoPackage [not null]
  saleorPackage SaleorPackage [not null]
  xentralLieferschein XentralLieferschein [not null]
  tenant Tenant [not null]
  tenantId String [not null]

  indexes {
    (number, tenantId) [unique]
  }
}

Table PackageEvent {
  id String [pk]
  time DateTime [not null]
  state PackageState [not null]
  message String
  package Package [not null]
  packageId String [not null]
  location String
  sentEmail TransactionalEmail
}

Table TransactionalEmail {
  id String [pk]
  time DateTime [not null]
  email String [not null]
  sentEmailId String [not null]
  packageEvent PackageEvent [not null]
  packageEventId String [unique, not null]
}

Table TrackingEmailApp {
  id String [pk]
  tenant Tenant [not null]
  tenantId String [not null]
  sendgridTemplates SendgridTemplate [not null]
  defaultLanguage Language [not null]
  sender String [not null]
  replyTo String [not null]
  integration TrackingIntegration [not null]
}

Table SendgridTemplate {
  id String [pk]
  name String [not null]
  packageState PackageState
  language Language [not null]
  subject String [not null]
  templateId String [not null]
  trackingEmailApp TrackingEmailApp [not null]
  trackingEmailAppId String [not null]

  indexes {
    (trackingEmailAppId, language, packageState) [unique]
  }
}

Table DpdApp {
  id String [pk]
  name String
  tenant Tenant [not null]
  tenantId String [unique, not null]
  integration TrackingIntegration
  integrationId String
  webhooks IncomingWebhook [not null]
  trackingIntegrationId String
}

Table EasyPostApp {
  id String [pk]
  name String
  apiKey String [not null]
  tenant Tenant [not null]
  tenantId String [unique, not null]
  webhooks IncomingWebhook [not null]
  integration TrackingIntegration
  integrationId String

  Note: 'EasyPost Model'
}

Table DHLTrackingApp {
  id String [pk]
  enabled Boolean [not null, default: false]
  tenant Tenant [not null]
  tenantId String [unique, not null]
  apiKey String [not null, note: 'From the developer portal. Is different for sandbox and prod. API keys are multi-tenant by default
so we might use them for multiple customer']
  trackingIntegration TrackingIntegration
  trackingIntegrationId String
  cronSchedule String [not null, default: '0 */4 * * *']
  cronTimeout Int [not null, default: 800]

  Note: 'DHL Tracking App model'
}

Table UPSTrackingApp {
  id String [pk]
  enabled Boolean [not null, default: false]
  tenant Tenant [not null]
  tenantId String [unique, not null]
  accessKey String [not null, note: 'From the developer portal. Is the same for sandbox and prod. API keys are multi-tenant by default
so we might use them for multiple customer. It is not clear, how much traffic we can produce with one key']
  trackingIntegration TrackingIntegration
  trackingIntegrationId String
  cronSchedule String [not null, default: '0 */4 * * *']
  cronTimeout Int [not null, default: 800]

  Note: 'UPS Tracking App model'
}

Table ProductDataFeedApp {
  id String [pk]
  productDetailStorefrontURL String [not null]
  tenant Tenant [not null]
  tenantId String [unique, not null]
  webhooks IncomingWebhook [not null]
  integration ProductDataFeedIntegration
}

Table DatevApp {
  id String [pk]
  enabled Boolean [not null, default: false]
  cronSchedule String [not null, default: '0 0 * * *']
  cronTimeout Int [not null, default: 800]
  tenant Tenant [not null]
  tenantId String [unique, not null]
  datevContacts DatevContact [not null]
}

Table LogisticsApp {
  id String [pk]
  currentOrdersCustomViewId String [not null]
  nextFiveDaysOrdersCustomViewId String [not null]
  currentBulkOrdersCustomViewId String [not null]
  nextFiveDaysBulkOrdersCustomViewId String [not null]
  tenant Tenant [not null]
  tenantId String [unique, not null]
  webhooks IncomingWebhook [not null]
  integration LogisticsIntegration
}

Table ZohoApp {
  id String [pk]
  enabled Boolean [not null, default: true]
  orgId String [not null]
  clientId String [not null]
  clientSecret String [not null]
  datacenter String [not null, default: '.eu', note: 'Set the datacenter of this ZohoApp. One of: ".com" | ".eu" | ".in" | ".com.au" | ".jp";']
  tenant Tenant [not null]
  tenantId String [not null]
  orgLanguage Language [not null, default: 'DE', note: 'The language, that this org is set to. Some API fields like the country name work with translated names, so we need to know the orgs language']
  customFieldReadyToFulfill String [note: 'the cf_api name from Zoho Settings of the custom field']
  customFieldVoucherCode String [note: 'the cf_api name from Zoho Settings of the custom field']
  customFieldCustomerNote String [note: 'the cf_api name from Zoho Settings of the custom field used to save a note to the customer']
  customFieldTrackingNotifications String [note: 'the cf_api name for Zoho settings of the custom field used to enable or disable tracking notifications']
  customFieldDatevCustomerId String [note: 'the cf_api name where we store the DATEV kreditor / debitor ID, if we have a running datev integration']
  cronSchedule String [not null, default: '*/30 * * * *']
  cronTimeout Int [not null, default: 800]
  syncContacts Boolean [not null, default: false]
  syncWarehouses Boolean [not null, default: false]
  syncOrders Boolean [not null, default: false]
  syncInvoices Boolean [not null, default: false]
  syncPayments Boolean [not null, default: false]
  syncProductStocks Boolean [not null, default: false]
  syncProducts Boolean [not null, default: false]
  syncPackages Boolean [not null, default: false]
  syncTaxes Boolean [not null, default: false]
  strapiToZohoIntegrations StrapiToZohoIntegration [not null]
  logisticsIntegrations LogisticsIntegration [not null]
  trackingIntegrations TrackingIntegration [not null]
  webhooks IncomingWebhook [not null]
  saleorZohoIntegration SaleorZohoIntegration [not null]
  zohoPayments ZohoPayment [not null]
  zohoItems ZohoItem [not null]
  zohoWarehouses ZohoWarehouse [not null]
  zohoContacts ZohoContact [not null]
  zohoInvoices ZohoInvoice [not null]
  zohoSalesOrder ZohoSalesOrder [not null]
  zohoPackageLineItems ZohoPackageLineItem [not null]
  zohoOrderLineItems ZohoOrderLineItem [not null]
  zohoTaxes ZohoTax [not null]
  zohoContactPersons ZohoContactPerson [not null]
  zohoAddresses ZohoAddress [not null]
  zohoPackages ZohoPackage [not null]
  zohoAccounts ZohoBankAccount [not null]
}

Table SaleorApp {
  id String [pk]
  domain String [unique, not null]
  apiUrl String [unique, note: 'the full saleor api url, inclusive /graphql: https://testing--saleor-puf.eu.saleor.cloud/graphql/']
  name String [not null]
  installedSaleorApps InstalledSaleorApp [not null]
  tenant Tenant
  tenantId String

  indexes {
    (domain, tenantId) [unique]
    (id, domain) [unique]
  }
}

Table InstalledSaleorApp {
  id String [pk]
  type SaleorAppType
  cronSchedule String [not null, default: '*/30 * * * *']
  orderPrefix String [not null, default: 'STORE']
  webhooks IncomingWebhook [not null]
  defaultWarehouse Warehouse [note: 'The default warehouse is always used, when warehouse information is missing for example for packages or items']
  defaultWarehouseId String
  token String [not null]
  channelSlug String
  saleorApp SaleorApp [not null]
  saleorAppId String [not null]
  domain String [not null]
  cookies Cookies [not null]
  saleorZohoIntegration SaleorZohoIntegration [not null]
  productDataFeedIntegration ProductDataFeedIntegration [not null]
  saleorPayment SaleorPayment [not null]
  saleorPaymentGateway SaleorPaymentGateway [not null]
  saleorProductVariant SaleorProductVariant [not null]
  saleorWarehouse SaleorWarehouse [not null]
  saleorOrder SaleorOrder [not null]
  saleorOrderLineItem SaleorOrderLineItem [not null]
  saleorFulfilmentLines SaleorFulfillmentLine [not null]
  saleorPackage SaleorPackage [not null]

  indexes {
    (domain, channelSlug) [unique]
  }
}

Table Tenant {
  id String [pk]
  name String [not null]
  subscriptions Subscription [not null]
  saleorApps SaleorApp [not null]
  zohoApps ZohoApp [not null]
  productdatafeedApps ProductDataFeedApp [not null]
  strapiApps StrapiApp [not null]
  productDataFeedIntegrations ProductDataFeedIntegration [not null]
  strapiToZohoIntegrations StrapiToZohoIntegration [not null]
  logisticsIntegrations LogisticsIntegration [not null]
  logisticsApps LogisticsApp [not null]
  trackingEmailApps TrackingEmailApp [not null]
  dpdApps DpdApp [not null]
  trackingIntegrations TrackingIntegration [not null]
  elasticLogDrainIntegration ElasticLogDrainIntegration [not null]
  xentralProxyApp XentralProxyApp [not null]
  order Order [not null]
  contact Contact [not null]
  company Company [not null]
  saleorZohoIntegration SaleorZohoIntegration [not null]
  product Product [not null]
  productVariant ProductVariant [not null]
  payment Payment [not null]
  paymentMethods PaymentMethod [not null]
  warehouse Warehouse [not null]
  invoice Invoice [not null]
  orderLineItem OrderLineItem [not null]
  packageLineItem PackageLineItem [not null]
  braintree BraintreeApp [not null]
  tax Tax [not null]
  package Package [not null]
  stockEntries StockEntries [not null]
  addresses Address [not null]
  billOfMaterial BillOfMaterial [not null]
  easyPost EasyPostApp [not null]
  DHLTrackingApps DHLTrackingApp [not null]
  datevApps DatevApp [not null]
  UPSTrackingApps UPSTrackingApp [not null]
  attributes Attribute [not null]
  eci_User_Tenants eci_User_Tenant [not null]
}

Table Subscription {
  id String [pk]
  tenant Tenant [not null]
  tenantId String [not null]
  payedUntil DateTime
  productDataFeedIntegration ProductDataFeedIntegration
  strapiToZohoIntegration StrapiToZohoIntegration
  logisticsIntegration LogisticsIntegration
  trackingIntegration TrackingIntegration
  elasticLogDrainIntegration ElasticLogDrainIntegration [not null]
  saleorZohoIntegration SaleorZohoIntegration [not null]
  xentralProxyApp XentralProxyApp [not null]
}

Table TrackingIntegration {
  id String [pk]
  enabled Boolean [not null, default: true]
  subscription Subscription
  subscriptionId String [unique]
  tenant Tenant [not null]
  tenantId String [not null]
  dpdApps DpdApp [not null]
  dhlTrackingApps DHLTrackingApp [not null]
  upsTrackingApps UPSTrackingApp [not null]
  easyPostApps EasyPostApp [not null]
  trackingEmailApp TrackingEmailApp [not null]
  trackingEmailAppId String [not null]
  zohoApp ZohoApp
  zohoAppId String
}

Table ProductDataFeedIntegration {
  id String [pk]
  enabled Boolean [not null, default: true]
  subscription Subscription
  subscriptionId String [unique]
  tenant Tenant [not null]
  tenantId String [not null]
  productDataFeedApp ProductDataFeedApp [not null]
  productDataFeedAppId String [unique, not null]
  installedSaleorApp InstalledSaleorApp
  installedSaleorAppId String
}

Table CronJobState {
  id String [pk]
  lastRun DateTime
  lastRunStatus CronJobStatus
  locked Boolean [not null, default: false, note: 'You can lock cron runs to prevent running in parallel for sensitive services like Xentral']
}

Table SaleorZohoIntegration {
  id String [pk]
  enabled Boolean [not null, default: true]
  subscription Subscription
  subscriptionId String [unique]
  tenant Tenant [not null]
  tenantId String [not null]
  zohoApp ZohoApp [not null]
  zohoAppId String [not null]
  installedSaleorApp InstalledSaleorApp [not null]
  installedSaleorAppId String [not null]
  orderPrefix String [not null, default: 'STORE']
  syncContacts Boolean [not null, default: false]
  syncWarehouses Boolean [not null, default: false]
  syncOrders Boolean [not null, default: false]
  syncInvoices Boolean [not null, default: false]
  syncPayments Boolean [not null, default: false]
  syncProductStocks Boolean [not null, default: false]
  syncProducts Boolean [not null, default: false]
  syncPackages Boolean [not null, default: false]
  syncTaxes Boolean [not null, default: false]
  cronScheduleZoho String [not null, default: '*/30 * * * *']
  cronScheduleSaleor String [not null, default: '*/30 * * * *']
  cronTimeoutZoho Int [not null, default: 800]
  cronTimeoutSaleor Int [not null, default: 600]
}

Table LogisticsIntegration {
  id String [pk]
  enabled Boolean [not null, default: true]
  subscription Subscription
  subscriptionId String [unique]
  tenant Tenant [not null]
  tenantId String [not null]
  zohoApp ZohoApp [not null]
  zohoAppId String [not null]
  logisticsApp LogisticsApp [not null]
  logisticsAppId String [unique, not null]
}

Table StrapiToZohoIntegration {
  id String [pk]
  payedUntil DateTime
  enabled Boolean [not null, default: true]
  strapiContentType String [not null, default: 'bulkorder']
  subscription Subscription
  subscriptionId String [unique]
  tenant Tenant [not null]
  tenantId String [not null]
  strapiApp StrapiApp [not null]
  strapiAppId String [unique, not null]
  zohoApp ZohoApp [not null]
  zohoAppId String [not null]
}

Table StrapiApp {
  id String [pk]
  name String [not null]
  webhooks IncomingWebhook [not null]
  tenant Tenant [not null]
  tenantId String [not null]
  integration StrapiToZohoIntegration
}

Table XentralProxyApp {
  id String [pk]
  enabled Boolean [not null, default: true]
  subscription Subscription
  subscriptionId String
  tenant Tenant [not null]
  tenantId String [not null]
  warehouse Warehouse [not null]
  warehouseId String [not null]
  username String [not null]
  password String [not null]
  projectId Int [not null]
  url String [not null]
  cronSchedule String [not null, default: '*/30 * * * *']
  cronTimeout Int [not null, default: 800]
  syncOrders Boolean [not null, default: false]
  syncProducts Boolean [not null, default: false]
  syncPackages Boolean [not null, default: false]
  xentralProxyAuftraege XentralProxyAuftrag [not null]
  xentralArtikel XentralArtikel [not null]
  XentralLieferscheine XentralLieferschein [not null]
  xentralCarrier XentralCarrier [not null]
}

Table XentralProxyAuftrag {
  id Int [not null, note: 'Xentral internal ID']
  xentralBelegNr String [not null]
  xentralProxyApp XentralProxyApp [not null]
  xentralProxyAppId String [not null]
  order Order [not null]
  orderId String [not null]
  status String [note: 'The status in Xentral']

  indexes {
    (id, xentralProxyAppId) [unique]
    (xentralBelegNr, xentralProxyAppId) [unique]
  }
}

Table IncomingWebhook {
  id String [pk]
  name String
  createdAt DateTime [default: `now()`, not null]
  updatedAt DateTime [not null]
  secret SecretKey
  dpdApp DpdApp
  dpdAppId String
  easyPostApp EasyPostApp
  easyPostAppId String
  logisticsApp LogisticsApp
  logisticsAppId String
  productDataFeedApp ProductDataFeedApp
  productDataFeedAppId String
  zohoApp ZohoApp
  zohoAppId String
  strapiApp StrapiApp
  strapiAppId String
  installedSaleorApp InstalledSaleorApp
  installedSaleorAppId String
  vercelLogDrainApp VercelLogDrainApp
  vercelLogDrainAppId String
}

Table SecretKey {
  id String [pk]
  name String
  secret String [not null]
  createdAt DateTime [default: `now()`, not null]
  incomingWebhook IncomingWebhook [not null]
  incomingWebhookId String [unique, not null]
}

Table InvoiceToPayment {
  paymentsId String [ref: > Payment.id]
  invoicesId String [ref: > Invoice.id]
}

Table InvoiceToOrder {
  ordersId String [ref: > Order.id]
  invoicesId String [ref: > Invoice.id]
}

Table AddressToContact {
  addressesId String [ref: > Address.id]
  contactId String [ref: > Contact.id]
}

Enum eci_User_Tenant_Role {
  MEMBER
  OWNER
}

Enum ZohoSalesOrderStatus {
  draft
  confirmed
  fulfilled
  shipped
}

Enum DatevContactType {
  DEBITOR
  KREDITOR
}

Enum PaymentMethodType {
  paypal
  card
  banktransfer
}

Enum GatewayType {
  braintree
  paypal
  stripe
  banktransfer
}

Enum Currency {
  EUR
  USD
}

Enum OrderStatus {
  draft
  unconfirmed
  confirmed
  closed
  canceled
}

Enum OrderPaymentStatus {
  unpaid
  fullyPaid
  partiallyPaid
  fullyRefunded
  partiallyRefunded
}

Enum OrderShipmentStatus {
  pending
  partiallyShipped
  shipped
  delivered
}

Enum OrderInvoiceStatus {
  notInvoiced
  invoiced
}

Enum CountryCode {
  AD
  AE
  AF
  AG
  AI
  AL
  AM
  AO
  AQ
  AR
  AS
  AT
  AU
  AW
  AX
  AZ
  BA
  BB
  BD
  BE
  BF
  BG
  BH
  BI
  BJ
  BL
  BM
  BN
  BO
  BQ
  BR
  BS
  BT
  BV
  BW
  BY
  BZ
  CA
  CC
  CD
  CF
  CG
  CH
  CI
  CK
  CL
  CM
  CN
  CO
  CR
  CU
  CV
  CW
  CX
  CY
  CZ
  DE
  DJ
  DK
  DM
  DO
  DZ
  EC
  EE
  EG
  EH
  ER
  ES
  ET
  EU
  FI
  FJ
  FK
  FM
  FO
  FR
  GA
  GB
  GD
  GE
  GF
  GG
  GH
  GI
  GL
  GM
  GN
  GP
  GQ
  GR
  GS
  GT
  GU
  GW
  GY
  HK
  HM
  HN
  HR
  HT
  HU
  ID
  IE
  IL
  IM
  IN
  IO
  IQ
  IR
  IS
  IT
  JE
  JM
  JO
  JP
  KE
  KG
  KH
  KI
  KM
  KN
  KP
  KR
  KW
  KY
  KZ
  LA
  LB
  LC
  LI
  LK
  LR
  LS
  LT
  LU
  LV
  LY
  MA
  MC
  MD
  ME
  MF
  MG
  MH
  MK
  ML
  MM
  MN
  MO
  MP
  MQ
  MR
  MS
  MT
  MU
  MV
  MW
  MX
  MY
  MZ
  NA
  NC
  NE
  NF
  NG
  NI
  NL
  NO
  NP
  NR
  NU
  NZ
  OM
  PA
  PE
  PF
  PG
  PH
  PK
  PL
  PM
  PN
  PR
  PS
  PT
  PW
  PY
  QA
  RE
  RO
  RS
  RU
  RW
  SA
  SB
  SC
  SD
  SE
  SG
  SH
  SI
  SJ
  SK
  SL
  SM
  SN
  SO
  SR
  SS
  ST
  SV
  SX
  SY
  SZ
  TC
  TD
  TF
  TG
  TH
  TJ
  TK
  TL
  TM
  TN
  TO
  TR
  TT
  TV
  TW
  TZ
  UA
  UG
  UM
  US
  UY
  UZ
  VA
  VC
  VE
  VG
  VI
  VN
  VU
  WF
  WS
  YE
  YT
  ZA
  ZM
  ZW
}

Enum AttributeType {
  DROPDOWN
  MULTISELECT
  FILE
  REFERENCE
  NUMERIC
  RICH_TEXT
  PLAIN_TEXT
  SWATCH
  BOOLEAN
  DATE
  DATE_TIME
}

Enum PackageState {
  INIT
  INFORMATION_RECEIVED
  IN_TRANSIT
  OUT_FOR_DELIVERY
  FAILED_ATTEMPT
  DELIVERED
  AVAILABLE_FOR_PICKUP
  EXCEPTION
  EXPIRED
  PENDING
}

Enum Carrier {
  DPD
  DHL
  UPS
  HERMES
  PICKUP
  UNKNOWN
  BULK
}

Enum Language {
  DE
  EN
}

Enum SaleorAppType {
  productdatafeed
  zohointegration
  mailchimpintegration
  paymentgatewaybanktransfer
  paymentgatewaybraintree
}

Enum CronJobStatus {
  success
  failure
}

Ref: eci_User_Tenant.userId > eci_User.id [delete: Cascade]

Ref: eci_User_Tenant.tenantId > Tenant.id [delete: Cascade]

Ref: Cookies.installedSaleorAppId > InstalledSaleorApp.id

Ref: SaleorOrder.(orderId, orderNumber) > Order.(id, orderNumber) [delete: Cascade]

Ref: SaleorOrder.installedSaleorAppId > InstalledSaleorApp.id [delete: Cascade]

Ref: SaleorPackage.packageId > Package.id [delete: Cascade]

Ref: SaleorPackage.installedSaleorAppId > InstalledSaleorApp.id [delete: Cascade]

Ref: SaleorFulfillmentLine.packageLineItemId > PackageLineItem.id [delete: Cascade]

Ref: SaleorFulfillmentLine.installedSaleorAppId > InstalledSaleorApp.id [delete: Cascade]

Ref: SaleorOrderLineItem.orderLineItemId > OrderLineItem.id [delete: Cascade]

Ref: SaleorOrderLineItem.installedSaleorAppId > InstalledSaleorApp.id [delete: Cascade]

Ref: SaleorPayment.(saleorOrderId, installedSaleorAppId) > SaleorOrder.(id, installedSaleorAppId)

Ref: SaleorPayment.paymentId > Payment.id [delete: Cascade]

Ref: SaleorPayment.installedSaleorAppId > InstalledSaleorApp.id [delete: Cascade]

Ref: SaleorProductVariant.productVariantId > ProductVariant.id [delete: Cascade]

Ref: SaleorProductVariant.installedSaleorAppId > InstalledSaleorApp.id [delete: Cascade]

Ref: SaleorWarehouse.warehouseId > Warehouse.id [delete: Cascade]

Ref: SaleorWarehouse.installedSaleorAppId > InstalledSaleorApp.id [delete: Cascade]

Ref: SaleorPaymentGateway.installedSaleorAppId > InstalledSaleorApp.id [delete: Cascade]

Ref: ZohoItem.productVariantId > ProductVariant.id [delete: Cascade]

Ref: ZohoItem.zohoAppId > ZohoApp.id [delete: Cascade]

Ref: ZohoPackage.packageId > Package.id [delete: Cascade]

Ref: ZohoPackage.zohoAppId > ZohoApp.id [delete: Cascade]

Ref: ZohoContact.zohoAppId > ZohoApp.id [delete: Cascade]

Ref: ZohoContactPerson.(zohoContactId, zohoAppId) > ZohoContact.(id, zohoAppId) [delete: Cascade]

Ref: ZohoContactPerson.contactId > Contact.id [delete: Cascade]

Ref: ZohoContactPerson.zohoAppId > ZohoApp.id [delete: Cascade]

Ref: ZohoAddress.addressId > Address.id [delete: Cascade]

Ref: ZohoAddress.(zohoContactId, zohoAppId) > ZohoContact.(id, zohoAppId) [delete: Cascade]

Ref: ZohoAddress.zohoAppId > ZohoApp.id [delete: Cascade]

Ref: ZohoSalesOrder.(zohoContactId, zohoAppId) > ZohoContact.(id, zohoAppId) [delete: Cascade]

Ref: ZohoSalesOrder.orderId > Order.id [delete: Cascade]

Ref: ZohoSalesOrder.zohoAppId > ZohoApp.id [delete: Cascade]

Ref: ZohoSalesOrder.(zohoContactPersonId, zohoContactPersonZohoAppId) > ZohoContactPerson.(id, zohoAppId)

Ref: ZohoInvoice.invoiceId > Invoice.id [delete: Cascade]

Ref: ZohoInvoice.zohoAppId > ZohoApp.id [delete: Cascade]

Ref: ZohoPayment.paymentId > Payment.id [delete: Cascade]

Ref: ZohoPayment.zohoAppId > ZohoApp.id [delete: Cascade]

Ref: ZohoBankAccount.paymentMethodId > PaymentMethod.id

Ref: ZohoBankAccount.zohoAppId > ZohoApp.id [delete: Cascade]

Ref: ZohoWarehouse.warehouseId > Warehouse.id [delete: Cascade]

Ref: ZohoWarehouse.zohoAppId > ZohoApp.id [delete: Cascade]

Ref: ZohoTax.taxId > Tax.id [delete: Cascade]

Ref: ZohoTax.zohoAppId > ZohoApp.id [delete: Cascade]

Ref: ZohoOrderLineItem.orderLineItemId > OrderLineItem.id [delete: Cascade]

Ref: ZohoOrderLineItem.zohoAppId > ZohoApp.id [delete: Cascade]

Ref: ZohoPackageLineItem.packagelineItemId > PackageLineItem.id [delete: Cascade]

Ref: ZohoPackageLineItem.zohoAppId > ZohoApp.id [delete: Cascade]

Ref: ZohoPackageLineItem.orderLineItemId > OrderLineItem.id

Ref: Invoice.tenantId > Tenant.id [delete: Cascade]

Ref: Invoice.mainContactId > Contact.id

Ref: DatevContact.contactId > Contact.id [delete: Cascade]

Ref: DatevContact.datevAppId > DatevApp.id [delete: Cascade]

Ref: Tax.tenantId > Tenant.id [delete: Cascade]

Ref: Payment.orderId > Order.id

Ref: Payment.mainContactId > Contact.id

Ref: Payment.tenantId > Tenant.id [delete: Cascade]

Ref: Payment.paymentMethodId > PaymentMethod.id

Ref: PaymentMethod.(saleorPaymentGatewayId, saleorPaymentGatewayInstalledSaleorAppId) > SaleorPaymentGateway.(id, installedSaleorAppId) [delete: Cascade]

Ref: PaymentMethod.tenantId > Tenant.id [delete: Cascade]

Ref: Company.tenantId > Tenant.id [delete: Cascade]

Ref: Contact.companyId > Company.id

Ref: Contact.tenantId > Tenant.id [delete: Cascade]

Ref: Warehouse.tenantId > Tenant.id [delete: Cascade]

Ref: OrderLineItem.orderId > Order.id [delete: Cascade]

Ref: OrderLineItem.taxId > Tax.id [delete: Cascade]

Ref: OrderLineItem.(productVariantId, sku) > ProductVariant.(id, sku)

Ref: OrderLineItem.tenantId > Tenant.id [delete: Cascade]

Ref: PackageLineItem.warehouseId > Warehouse.id

Ref: PackageLineItem.packageId > Package.id [delete: Cascade]

Ref: PackageLineItem.(tenantId, sku) > ProductVariant.(tenantId, sku)

Ref: PackageLineItem.tenantId > Tenant.id [delete: Cascade]

Ref: Order.shippingPriceTaxId > Tax.id [delete: Cascade]

Ref: Order.mainContactId > Contact.id

Ref: Order.shippingAddressId > Address.id [delete: Cascade]

Ref: Order.billingAddressId > Address.id [delete: Cascade]

Ref: Order.tenantId > Tenant.id [delete: Cascade]

Ref: Address.tenantId > Tenant.id [delete: Cascade]

Ref: Attribute.tenantId > Tenant.id [delete: Cascade]

Ref: AttributeValue.attributeId > Attribute.id [delete: Cascade]

Ref: Product.tenantId > Tenant.id [delete: Cascade]

Ref: ProductVariant.productId > Product.id [delete: Cascade]

Ref: ProductVariant.tenantId > Tenant.id [delete: Cascade]

Ref: ProductVariant.defaultWarehouseId > Warehouse.id [delete: Cascade]

Ref: ProductVariant.salesTaxId > Tax.id

Ref: BillOfMaterial.tenantId > Tenant.id [delete: Cascade]

Ref: BillOfMaterial.productVariantId > ProductVariant.id [delete: Cascade]

Ref: BillOfMaterial.partId > ProductVariant.id [delete: Cascade]

Ref: XentralCarrier.xentralProxyAppId > XentralProxyApp.id

Ref: XentralArtikel.xentralProxyAppId > XentralProxyApp.id

Ref: XentralArtikel.productVariantId > ProductVariant.id

Ref: XentralLieferschein.xentralProxyAppId > XentralProxyApp.id

Ref: XentralLieferschein.packageId > Package.id [delete: Cascade]

Ref: StockEntries.tenantId > Tenant.id [delete: Cascade]

Ref: StockEntries.warehouseId > Warehouse.id [delete: Cascade]

Ref: StockEntries.productVariantId > ProductVariant.id [delete: Cascade]

Ref: BraintreeApp.tenantId > Tenant.id [delete: Cascade]

Ref: BraintreeTransaction.braintreeAppId > BraintreeApp.id [delete: Cascade]

Ref: BraintreeTransaction.paymentId > Payment.id [delete: Cascade]

Ref: ElasticLogDrainIntegration.subscriptionId > Subscription.id

Ref: ElasticLogDrainIntegration.tenantId > Tenant.id [delete: Cascade]

Ref: ElasticLogDrainIntegration.logDrainAppId > VercelLogDrainApp.id

Ref: ElasticLogDrainIntegration.elasticClusterId > ElasticCluster.id

Ref: Package.orderId > Order.id [delete: Cascade]

Ref: Package.tenantId > Tenant.id [delete: Cascade]

Ref: PackageEvent.packageId > Package.id [delete: Cascade]

Ref: TransactionalEmail.packageEventId - PackageEvent.id

Ref: TrackingEmailApp.tenantId > Tenant.id [delete: Cascade]

Ref: SendgridTemplate.trackingEmailAppId > TrackingEmailApp.id [delete: Cascade]

Ref: DpdApp.tenantId > Tenant.id [delete: Cascade]

Ref: DpdApp.integrationId > TrackingIntegration.id

Ref: EasyPostApp.tenantId > Tenant.id [delete: Cascade]

Ref: EasyPostApp.integrationId > TrackingIntegration.id

Ref: DHLTrackingApp.tenantId > Tenant.id [delete: Cascade]

Ref: DHLTrackingApp.trackingIntegrationId > TrackingIntegration.id

Ref: UPSTrackingApp.tenantId > Tenant.id [delete: Cascade]

Ref: UPSTrackingApp.trackingIntegrationId > TrackingIntegration.id

Ref: ProductDataFeedApp.tenantId > Tenant.id [delete: Cascade]

Ref: DatevApp.tenantId > Tenant.id [delete: Cascade]

Ref: LogisticsApp.tenantId > Tenant.id [delete: Cascade]

Ref: ZohoApp.tenantId > Tenant.id [delete: Cascade]

Ref: SaleorApp.tenantId > Tenant.id [delete: Cascade]

Ref: InstalledSaleorApp.defaultWarehouseId > Warehouse.id

Ref: InstalledSaleorApp.(saleorAppId, domain) > SaleorApp.(id, domain) [delete: Cascade]

Ref: Subscription.tenantId > Tenant.id [delete: Cascade]

Ref: TrackingIntegration.subscriptionId - Subscription.id

Ref: TrackingIntegration.tenantId > Tenant.id [delete: Cascade]

Ref: TrackingIntegration.trackingEmailAppId > TrackingEmailApp.id

Ref: TrackingIntegration.zohoAppId > ZohoApp.id

Ref: ProductDataFeedIntegration.subscriptionId - Subscription.id

Ref: ProductDataFeedIntegration.tenantId > Tenant.id [delete: Cascade]

Ref: ProductDataFeedIntegration.productDataFeedAppId - ProductDataFeedApp.id

Ref: ProductDataFeedIntegration.installedSaleorAppId > InstalledSaleorApp.id

Ref: SaleorZohoIntegration.subscriptionId > Subscription.id

Ref: SaleorZohoIntegration.tenantId > Tenant.id [delete: Cascade]

Ref: SaleorZohoIntegration.zohoAppId > ZohoApp.id

Ref: SaleorZohoIntegration.installedSaleorAppId > InstalledSaleorApp.id [delete: Cascade]

Ref: LogisticsIntegration.subscriptionId - Subscription.id

Ref: LogisticsIntegration.tenantId > Tenant.id [delete: Cascade]

Ref: LogisticsIntegration.zohoAppId > ZohoApp.id

Ref: LogisticsIntegration.logisticsAppId - LogisticsApp.id

Ref: StrapiToZohoIntegration.subscriptionId - Subscription.id

Ref: StrapiToZohoIntegration.tenantId > Tenant.id [delete: Cascade]

Ref: StrapiToZohoIntegration.strapiAppId - StrapiApp.id

Ref: StrapiToZohoIntegration.zohoAppId > ZohoApp.id

Ref: StrapiApp.tenantId > Tenant.id [delete: Cascade]

Ref: XentralProxyApp.subscriptionId > Subscription.id

Ref: XentralProxyApp.tenantId > Tenant.id [delete: Cascade]

Ref: XentralProxyApp.warehouseId > Warehouse.id [delete: Cascade]

Ref: XentralProxyAuftrag.xentralProxyAppId > XentralProxyApp.id

Ref: XentralProxyAuftrag.orderId > Order.id

Ref: IncomingWebhook.dpdAppId > DpdApp.id [delete: Cascade]

Ref: IncomingWebhook.easyPostAppId > EasyPostApp.id [delete: Cascade]

Ref: IncomingWebhook.logisticsAppId > LogisticsApp.id [delete: Cascade]

Ref: IncomingWebhook.productDataFeedAppId > ProductDataFeedApp.id [delete: Cascade]

Ref: IncomingWebhook.zohoAppId > ZohoApp.id [delete: Cascade]

Ref: IncomingWebhook.strapiAppId > StrapiApp.id [delete: Cascade]

Ref: IncomingWebhook.installedSaleorAppId > InstalledSaleorApp.id [delete: Cascade]

Ref: IncomingWebhook.vercelLogDrainAppId > VercelLogDrainApp.id [delete: Cascade]

Ref: SecretKey.incomingWebhookId - IncomingWebhook.id [delete: Cascade]