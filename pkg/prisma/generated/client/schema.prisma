datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  output = "./generated/client"
}



model ProductDataFeedApp {
  id String @id

  // Graphql endpoint of a saleor app
  productDetailStorefrontURL String

  saleorApp   SaleorApp @relation(fields: [saleorAppId], references: [id])
  saleorAppId String

  tenant   Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  tenantId String @unique

  webhooks    IncomingProductDataFeedWebhook[]
  integration ProductDataFeedIntegration?
}

model LogisticsApp {
  id String @id

  // The custom view ID use to get all current orders
  currentOrdersCustomViewId String

  // Regular orders in the next fice days custom view
  nextFiveDaysOrdersCustomViewId String

  // The custom view ID to get all current bulk orders
  currentBulkOrdersCustomViewId String

  // custom view ID to get all bulk orders for the next days
  nextFiveDaysBulkOrdersCustomViewId String


  tenant   Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  tenantId String @unique

  webhooks    IncomingLogisticsWebhook[]
  integration LogisticsIntegration?
}

model ZohoApp {
  id String @id

  orgId                   String
  clientId                String
  clientSecret            String
  tenant                  Tenant                    @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  tenantId                String                    @unique
  strapiToZohoIntegration StrapiToZohoIntegration[]
  logisticsIntegration    LogisticsIntegration[]
}

// Saleor Apps are separate applications that use GraphQL to talk to a Saleor
// server and receive webhooks with event notifications from Saleor.
// Every tenant can have multiple saleor apps which correspond to different
// saleor instances.
model SaleorApp {

  id String @id

  // The domain of a running saleor instance.
  // You can prefix with http:// or https:// if you want.
  // If no protocol is specified, https:// is assumed.
  domain String

  name String

  channelSlug String?

  installedSaleorApp InstalledSaleorApp?

  tenant   Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  tenantId String

  productDataFeedIntegration ProductDataFeedIntegration[]

  ProductDataFeedApp ProductDataFeedApp[]
  @@unique([domain, channelSlug])
}

model InstalledSaleorApp {
  // The saleor application id
  // This is the id for the app on saleor's side and can be used in queries and
  // mutations to identify the app.
  id String @id

  // Every SaleorApp can have multiple webhooks configured.
  // This is not really necessary because a webhook can fire on multiple events
  // but let's be on the safe side.
  webhooks IncomingSaleorWebhook[]

  // Unlike regular users, Saleor Apps use a bearer token. The token is
  // assigned at App installation time and needs to be stored in a secure manner.
  // The authorization header for Apps has the following format:
  // Authorization: Bearer <app-token>
  token String


  saleorApp   SaleorApp @relation(fields: [saleorAppId], references: [id], onDelete: Cascade)
  saleorAppId String    @unique
}

// One tenant per company
// Every tenant can have multiple connections with every integration.
model Tenant {
  id String @id

  // Human readable identifier
  name String

  Subscriptions Subscription[]

  // App configurations
  saleorApps                 SaleorApp[]
  zohoApps                   ZohoApp[]
  productdatafeedApps        ProductDataFeedApp[]
  strapiApps                 StrapiApp[]
  productDataFeedIntegration ProductDataFeedIntegration[]
  strapiToZohoIntegration    StrapiToZohoIntegration[]
  logisticsIntegration       LogisticsIntegration[]
  logisticsApp               LogisticsApp[]
}

// A subscription indicates a tenant has payed for one integration.
model Subscription {
  id String @id

  tenant   Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  tenantId String


  payedUntil DateTime?

  productDataFeedIntegration ProductDataFeedIntegration?
  strapiToZohoIntegration    StrapiToZohoIntegration?
  logisticsIntegration       LogisticsIntegration?
}

// ----------------------------------------------------------------------------
// Integrations
//
// Every integration is a connection between application configurations and a tenant
// ----------------------------------------------------------------------------

model ProductDataFeedIntegration {
  id String @id

  // Allow the user to manually enabled or disable the integration
  // Regardless of current subscription state.
  enabled Boolean @default(true)

  subscription   Subscription? @relation(fields: [subscriptionId], references: [id])
  subscriptionId String?       @unique

  tenant   Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  tenantId String

  productDataFeedApp   ProductDataFeedApp @relation(fields: [productDataFeedAppId], references: [id])
  productDataFeedAppId String
  saleorApp            SaleorApp          @relation(fields: [saleorAppId], references: [id])
  saleorAppId          String
}

model LogisticsIntegration {
  id String @id

  // Allow the user to manually enabled or disable the integration
  // Regardless of current subscription state.
  enabled Boolean @default(true)

  subscription   Subscription? @relation(fields: [subscriptionId], references: [id])
  subscriptionId String?       @unique

  tenant   Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  tenantId String

  zohoApp   ZohoApp @relation(fields: [zohoAppId], references: [id])
  zohoAppId String

  logisticsApp   LogisticsApp @relation(fields: [logisticsAppId], references: [id])
  logisticsAppId String
}

model StrapiToZohoIntegration {
  id         String    @id
  payedUntil DateTime?
  enabled    Boolean   @default(true)

  // The Content type of BulkOrders
  strapiContentType String @default("bulkorder")



  subscription   Subscription? @relation(fields: [subscriptionId], references: [id])
  subscriptionId String?       @unique

  tenant      Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  tenantId    String
  strapiApp   StrapiApp @relation(fields: [strapiAppId], references: [id])
  strapiAppId String
  zohoApp     ZohoApp   @relation(fields: [zohoAppId], references: [id])
  zohoAppId   String

}

// Every tenant can have multiple strapi instances
model StrapiApp {
  id String @id

  name     String
  webhooks IncomingStrapiWebhook[]

  tenant   Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  tenantId String


  integration StrapiToZohoIntegration?
}

// ----------------------------------------------------------------------------
// Every Config/App can have multiple webhooks attached
// ----------------------------------------------------------------------------

model IncomingSaleorWebhook {
  id   String  @id
  // Human readable name
  name String?


  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  secret   SecretKey @relation(fields: [secretId], references: [id])
  secretId String

  installedSaleorApp   InstalledSaleorApp @relation(fields: [installedSaleorAppId], references: [id], onDelete: Cascade)
  installedSaleorAppId String
}

model IncomingStrapiWebhook {
  id   String  @id
  // Human readable name
  name String?


  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  secret   SecretKey @relation(fields: [secretId], references: [id])
  secretId String

  strapiApp   StrapiApp @relation(fields: [strapiAppId], references: [id], onDelete: Cascade)
  strapiAppId String
}

model IncomingProductDataFeedWebhook {
  id   String  @id
  // Human readable name
  name String?


  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  productDataFeedApp   ProductDataFeedApp @relation(fields: [productDataFeedAppId], references: [id], onDelete: Cascade)
  productDataFeedAppId String
}

model IncomingLogisticsWebhook {
  id   String  @id
  // Human readable name
  name String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  logisticsApp   LogisticsApp @relation(fields: [logisticsAppId], references: [id], onDelete: Cascade)
  logisticsAppId String
}

// Until prisma allows for inheritance we are stuck createing different webhook modules
// with duplicate code

// model IncomingWebhook {
//   id String @id

//   // Human readable name
//   name String?

//   createdAt DateTime  @default(now())
//   updatedAt DateTime  @updatedAt
//

//   secret   SecretKey @relation(fields: [secretId], references: [id])
//   secretId String

//   // Webhook connections
//   productDataFeed   ProductDataFeedApp? @relation(fields: [productDataFeedId], references: [id], onDelete: Cascade)
//   productDataFeedId String?
//   saleorApp         SaleorApp?          @relation(fields: [saleorAppId], references: [id], onDelete: Cascade)
//   saleorAppId       String?
//   strapi            StrapiApp?          @relation(fields: [strapiAppId], references: [id], onDelete: Cascade)
//   strapiAppId       String?
// }
model SecretKey {
  id String @id @default(uuid())

  // Human readable name
  name      String?
  secret    String
  createdAt DateTime @default(now())


  // Connections ..
  // Required by prisma
  incomingSaleorWebhook IncomingSaleorWebhook?
  IncomingStrapiWebhook IncomingStrapiWebhook?
}
